//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/firestore/v1/firestore.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The Cloud Firestore service.
///
/// Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
/// document database that simplifies storing, syncing, and querying data for
/// your mobile, web, and IoT apps at global scale. Its client libraries provide
/// live synchronization and offline support, while its security features and
/// integrations with Firebase and Google Cloud Platform accelerate building
/// truly serverless apps.
///
/// Usage: instantiate `Google_Firestore_V1_FirestoreClient`, then call methods of this protocol to make API calls.
public protocol Google_Firestore_V1_FirestoreClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? { get }

  func getDocument(
    _ request: Google_Firestore_V1_GetDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_GetDocumentRequest, Google_Firestore_V1_Document>

  func listDocuments(
    _ request: Google_Firestore_V1_ListDocumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_ListDocumentsRequest, Google_Firestore_V1_ListDocumentsResponse>

  func updateDocument(
    _ request: Google_Firestore_V1_UpdateDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_UpdateDocumentRequest, Google_Firestore_V1_Document>

  func deleteDocument(
    _ request: Google_Firestore_V1_DeleteDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func batchGetDocuments(
    _ request: Google_Firestore_V1_BatchGetDocumentsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1_BatchGetDocumentsResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1_BatchGetDocumentsRequest, Google_Firestore_V1_BatchGetDocumentsResponse>

  func beginTransaction(
    _ request: Google_Firestore_V1_BeginTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_BeginTransactionRequest, Google_Firestore_V1_BeginTransactionResponse>

  func commit(
    _ request: Google_Firestore_V1_CommitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_CommitRequest, Google_Firestore_V1_CommitResponse>

  func rollback(
    _ request: Google_Firestore_V1_RollbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func runQuery(
    _ request: Google_Firestore_V1_RunQueryRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1_RunQueryResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1_RunQueryRequest, Google_Firestore_V1_RunQueryResponse>

  func runAggregationQuery(
    _ request: Google_Firestore_V1_RunAggregationQueryRequest,
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1_RunAggregationQueryResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1_RunAggregationQueryRequest, Google_Firestore_V1_RunAggregationQueryResponse>

  func partitionQuery(
    _ request: Google_Firestore_V1_PartitionQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_PartitionQueryRequest, Google_Firestore_V1_PartitionQueryResponse>

  func write(
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1_WriteResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1_WriteRequest, Google_Firestore_V1_WriteResponse>

  func listen(
    callOptions: CallOptions?,
    handler: @escaping (Google_Firestore_V1_ListenResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1_ListenRequest, Google_Firestore_V1_ListenResponse>

  func listCollectionIds(
    _ request: Google_Firestore_V1_ListCollectionIdsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_ListCollectionIdsRequest, Google_Firestore_V1_ListCollectionIdsResponse>

  func batchWrite(
    _ request: Google_Firestore_V1_BatchWriteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_BatchWriteRequest, Google_Firestore_V1_BatchWriteResponse>

  func createDocument(
    _ request: Google_Firestore_V1_CreateDocumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_V1_CreateDocumentRequest, Google_Firestore_V1_Document>
}

extension Google_Firestore_V1_FirestoreClientProtocol {
  public var serviceName: String {
    return "google.firestore.v1.Firestore"
  }

  /// Gets a single document.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDocument(
    _ request: Google_Firestore_V1_GetDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_GetDocumentRequest, Google_Firestore_V1_Document> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.getDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDocumentInterceptors() ?? []
    )
  }

  /// Lists documents.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDocuments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDocuments(
    _ request: Google_Firestore_V1_ListDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_ListDocumentsRequest, Google_Firestore_V1_ListDocumentsResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDocumentsInterceptors() ?? []
    )
  }

  /// Updates or inserts a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDocument(
    _ request: Google_Firestore_V1_UpdateDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_UpdateDocumentRequest, Google_Firestore_V1_Document> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.updateDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDocumentInterceptors() ?? []
    )
  }

  /// Deletes a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteDocument(
    _ request: Google_Firestore_V1_DeleteDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.deleteDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? []
    )
  }

  /// Gets multiple documents.
  ///
  /// Documents returned by this method are not guaranteed to be returned in the
  /// same order that they were requested.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchGetDocuments.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func batchGetDocuments(
    _ request: Google_Firestore_V1_BatchGetDocumentsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1_BatchGetDocumentsResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1_BatchGetDocumentsRequest, Google_Firestore_V1_BatchGetDocumentsResponse> {
    return self.makeServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.batchGetDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchGetDocumentsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Starts a new transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func beginTransaction(
    _ request: Google_Firestore_V1_BeginTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_BeginTransactionRequest, Google_Firestore_V1_BeginTransactionResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.beginTransaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? []
    )
  }

  /// Commits a transaction, while optionally updating documents.
  ///
  /// - Parameters:
  ///   - request: Request to send to Commit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func commit(
    _ request: Google_Firestore_V1_CommitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_CommitRequest, Google_Firestore_V1_CommitResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  /// Rolls back a transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to Rollback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rollback(
    _ request: Google_Firestore_V1_RollbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.rollback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollbackInterceptors() ?? []
    )
  }

  /// Runs a query.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunQuery.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func runQuery(
    _ request: Google_Firestore_V1_RunQueryRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1_RunQueryResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1_RunQueryRequest, Google_Firestore_V1_RunQueryResponse> {
    return self.makeServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.runQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunQueryInterceptors() ?? [],
      handler: handler
    )
  }

  /// Runs an aggregation query.
  ///
  /// Rather than producing [Document][google.firestore.v1.Document] results like
  /// [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
  /// allows running an aggregation to produce a series of
  /// [AggregationResult][google.firestore.v1.AggregationResult] server-side.
  ///
  /// High-Level Example:
  ///
  /// ```
  /// -- Return the number of documents in table given a filter.
  /// SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
  /// ```
  ///
  /// - Parameters:
  ///   - request: Request to send to RunAggregationQuery.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func runAggregationQuery(
    _ request: Google_Firestore_V1_RunAggregationQueryRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1_RunAggregationQueryResponse) -> Void
  ) -> ServerStreamingCall<Google_Firestore_V1_RunAggregationQueryRequest, Google_Firestore_V1_RunAggregationQueryResponse> {
    return self.makeServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.runAggregationQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunAggregationQueryInterceptors() ?? [],
      handler: handler
    )
  }

  /// Partitions a query by returning partition cursors that can be used to run
  /// the query in parallel. The returned partition cursors are split points that
  /// can be used by RunQuery as starting/end points for the query results.
  ///
  /// - Parameters:
  ///   - request: Request to send to PartitionQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func partitionQuery(
    _ request: Google_Firestore_V1_PartitionQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_PartitionQueryRequest, Google_Firestore_V1_PartitionQueryResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.partitionQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePartitionQueryInterceptors() ?? []
    )
  }

  /// Streams batches of document updates and deletes, in order. This method is
  /// only available via the gRPC API (not REST).
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func write(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1_WriteResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1_WriteRequest, Google_Firestore_V1_WriteResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.write.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteInterceptors() ?? [],
      handler: handler
    )
  }

  /// Listens to changes. This method is only available via the gRPC API (not
  /// REST).
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func listen(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Firestore_V1_ListenResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Firestore_V1_ListenRequest, Google_Firestore_V1_ListenResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listen.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenInterceptors() ?? [],
      handler: handler
    )
  }

  /// Lists all the collection IDs underneath a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCollectionIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCollectionIds(
    _ request: Google_Firestore_V1_ListCollectionIdsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_ListCollectionIdsRequest, Google_Firestore_V1_ListCollectionIdsResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listCollectionIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCollectionIdsInterceptors() ?? []
    )
  }

  /// Applies a batch of write operations.
  ///
  /// The BatchWrite method does not apply the write operations atomically
  /// and can apply them out of order. Method does not allow more than one write
  /// per document. Each write succeeds or fails independently. See the
  /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
  /// success status of each write.
  ///
  /// If you require an atomically applied set of writes, use
  /// [Commit][google.firestore.v1.Firestore.Commit] instead.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchWrite.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchWrite(
    _ request: Google_Firestore_V1_BatchWriteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_BatchWriteRequest, Google_Firestore_V1_BatchWriteResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.batchWrite.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchWriteInterceptors() ?? []
    )
  }

  /// Creates a new document.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createDocument(
    _ request: Google_Firestore_V1_CreateDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_V1_CreateDocumentRequest, Google_Firestore_V1_Document> {
    return self.makeUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.createDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDocumentInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Google_Firestore_V1_FirestoreClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Google_Firestore_V1_FirestoreNIOClient")
public final class Google_Firestore_V1_FirestoreClient: Google_Firestore_V1_FirestoreClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.firestore.v1.Firestore service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Google_Firestore_V1_FirestoreNIOClient: Google_Firestore_V1_FirestoreClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol?

  /// Creates a client for the google.firestore.v1.Firestore service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The Cloud Firestore service.
///
/// Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
/// document database that simplifies storing, syncing, and querying data for
/// your mobile, web, and IoT apps at global scale. Its client libraries provide
/// live synchronization and offline support, while its security features and
/// integrations with Firebase and Google Cloud Platform accelerate building
/// truly serverless apps.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firestore_V1_FirestoreAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? { get }

  func makeGetDocumentCall(
    _ request: Google_Firestore_V1_GetDocumentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_GetDocumentRequest, Google_Firestore_V1_Document>

  func makeListDocumentsCall(
    _ request: Google_Firestore_V1_ListDocumentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_ListDocumentsRequest, Google_Firestore_V1_ListDocumentsResponse>

  func makeUpdateDocumentCall(
    _ request: Google_Firestore_V1_UpdateDocumentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_UpdateDocumentRequest, Google_Firestore_V1_Document>

  func makeDeleteDocumentCall(
    _ request: Google_Firestore_V1_DeleteDocumentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeBatchGetDocumentsCall(
    _ request: Google_Firestore_V1_BatchGetDocumentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Google_Firestore_V1_BatchGetDocumentsRequest, Google_Firestore_V1_BatchGetDocumentsResponse>

  func makeBeginTransactionCall(
    _ request: Google_Firestore_V1_BeginTransactionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_BeginTransactionRequest, Google_Firestore_V1_BeginTransactionResponse>

  func makeCommitCall(
    _ request: Google_Firestore_V1_CommitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_CommitRequest, Google_Firestore_V1_CommitResponse>

  func makeRollbackCall(
    _ request: Google_Firestore_V1_RollbackRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeRunQueryCall(
    _ request: Google_Firestore_V1_RunQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Google_Firestore_V1_RunQueryRequest, Google_Firestore_V1_RunQueryResponse>

  func makeRunAggregationQueryCall(
    _ request: Google_Firestore_V1_RunAggregationQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Google_Firestore_V1_RunAggregationQueryRequest, Google_Firestore_V1_RunAggregationQueryResponse>

  func makePartitionQueryCall(
    _ request: Google_Firestore_V1_PartitionQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_PartitionQueryRequest, Google_Firestore_V1_PartitionQueryResponse>

  func makeWriteCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Firestore_V1_WriteRequest, Google_Firestore_V1_WriteResponse>

  func makeListenCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Firestore_V1_ListenRequest, Google_Firestore_V1_ListenResponse>

  func makeListCollectionIdsCall(
    _ request: Google_Firestore_V1_ListCollectionIdsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_ListCollectionIdsRequest, Google_Firestore_V1_ListCollectionIdsResponse>

  func makeBatchWriteCall(
    _ request: Google_Firestore_V1_BatchWriteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_BatchWriteRequest, Google_Firestore_V1_BatchWriteResponse>

  func makeCreateDocumentCall(
    _ request: Google_Firestore_V1_CreateDocumentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_CreateDocumentRequest, Google_Firestore_V1_Document>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firestore_V1_FirestoreAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firestore_V1_FirestoreClientMetadata.serviceDescriptor
  }

  public var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetDocumentCall(
    _ request: Google_Firestore_V1_GetDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_GetDocumentRequest, Google_Firestore_V1_Document> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.getDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDocumentInterceptors() ?? []
    )
  }

  public func makeListDocumentsCall(
    _ request: Google_Firestore_V1_ListDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_ListDocumentsRequest, Google_Firestore_V1_ListDocumentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDocumentsInterceptors() ?? []
    )
  }

  public func makeUpdateDocumentCall(
    _ request: Google_Firestore_V1_UpdateDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_UpdateDocumentRequest, Google_Firestore_V1_Document> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.updateDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDocumentInterceptors() ?? []
    )
  }

  public func makeDeleteDocumentCall(
    _ request: Google_Firestore_V1_DeleteDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.deleteDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? []
    )
  }

  public func makeBatchGetDocumentsCall(
    _ request: Google_Firestore_V1_BatchGetDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Google_Firestore_V1_BatchGetDocumentsRequest, Google_Firestore_V1_BatchGetDocumentsResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.batchGetDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchGetDocumentsInterceptors() ?? []
    )
  }

  public func makeBeginTransactionCall(
    _ request: Google_Firestore_V1_BeginTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_BeginTransactionRequest, Google_Firestore_V1_BeginTransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.beginTransaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? []
    )
  }

  public func makeCommitCall(
    _ request: Google_Firestore_V1_CommitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_CommitRequest, Google_Firestore_V1_CommitResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  public func makeRollbackCall(
    _ request: Google_Firestore_V1_RollbackRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.rollback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollbackInterceptors() ?? []
    )
  }

  public func makeRunQueryCall(
    _ request: Google_Firestore_V1_RunQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Google_Firestore_V1_RunQueryRequest, Google_Firestore_V1_RunQueryResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.runQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunQueryInterceptors() ?? []
    )
  }

  public func makeRunAggregationQueryCall(
    _ request: Google_Firestore_V1_RunAggregationQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Google_Firestore_V1_RunAggregationQueryRequest, Google_Firestore_V1_RunAggregationQueryResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.runAggregationQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunAggregationQueryInterceptors() ?? []
    )
  }

  public func makePartitionQueryCall(
    _ request: Google_Firestore_V1_PartitionQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_PartitionQueryRequest, Google_Firestore_V1_PartitionQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.partitionQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePartitionQueryInterceptors() ?? []
    )
  }

  public func makeWriteCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Firestore_V1_WriteRequest, Google_Firestore_V1_WriteResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.write.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteInterceptors() ?? []
    )
  }

  public func makeListenCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Firestore_V1_ListenRequest, Google_Firestore_V1_ListenResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listen.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenInterceptors() ?? []
    )
  }

  public func makeListCollectionIdsCall(
    _ request: Google_Firestore_V1_ListCollectionIdsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_ListCollectionIdsRequest, Google_Firestore_V1_ListCollectionIdsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listCollectionIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCollectionIdsInterceptors() ?? []
    )
  }

  public func makeBatchWriteCall(
    _ request: Google_Firestore_V1_BatchWriteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_BatchWriteRequest, Google_Firestore_V1_BatchWriteResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.batchWrite.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchWriteInterceptors() ?? []
    )
  }

  public func makeCreateDocumentCall(
    _ request: Google_Firestore_V1_CreateDocumentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_V1_CreateDocumentRequest, Google_Firestore_V1_Document> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.createDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDocumentInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firestore_V1_FirestoreAsyncClientProtocol {
  public func getDocument(
    _ request: Google_Firestore_V1_GetDocumentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_Document {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.getDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDocumentInterceptors() ?? []
    )
  }

  public func listDocuments(
    _ request: Google_Firestore_V1_ListDocumentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_ListDocumentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDocumentsInterceptors() ?? []
    )
  }

  public func updateDocument(
    _ request: Google_Firestore_V1_UpdateDocumentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_Document {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.updateDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDocumentInterceptors() ?? []
    )
  }

  public func deleteDocument(
    _ request: Google_Firestore_V1_DeleteDocumentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.deleteDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? []
    )
  }

  public func batchGetDocuments(
    _ request: Google_Firestore_V1_BatchGetDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Firestore_V1_BatchGetDocumentsResponse> {
    return self.performAsyncServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.batchGetDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchGetDocumentsInterceptors() ?? []
    )
  }

  public func beginTransaction(
    _ request: Google_Firestore_V1_BeginTransactionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_BeginTransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.beginTransaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? []
    )
  }

  public func commit(
    _ request: Google_Firestore_V1_CommitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_CommitResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  public func rollback(
    _ request: Google_Firestore_V1_RollbackRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.rollback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollbackInterceptors() ?? []
    )
  }

  public func runQuery(
    _ request: Google_Firestore_V1_RunQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Firestore_V1_RunQueryResponse> {
    return self.performAsyncServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.runQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunQueryInterceptors() ?? []
    )
  }

  public func runAggregationQuery(
    _ request: Google_Firestore_V1_RunAggregationQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Firestore_V1_RunAggregationQueryResponse> {
    return self.performAsyncServerStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.runAggregationQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunAggregationQueryInterceptors() ?? []
    )
  }

  public func partitionQuery(
    _ request: Google_Firestore_V1_PartitionQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_PartitionQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.partitionQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePartitionQueryInterceptors() ?? []
    )
  }

  public func write<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Firestore_V1_WriteResponse> where RequestStream: Sequence, RequestStream.Element == Google_Firestore_V1_WriteRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.write.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteInterceptors() ?? []
    )
  }

  public func write<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Firestore_V1_WriteResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Google_Firestore_V1_WriteRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.write.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteInterceptors() ?? []
    )
  }

  public func listen<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Firestore_V1_ListenResponse> where RequestStream: Sequence, RequestStream.Element == Google_Firestore_V1_ListenRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listen.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenInterceptors() ?? []
    )
  }

  public func listen<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Firestore_V1_ListenResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Google_Firestore_V1_ListenRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listen.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenInterceptors() ?? []
    )
  }

  public func listCollectionIds(
    _ request: Google_Firestore_V1_ListCollectionIdsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_ListCollectionIdsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.listCollectionIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCollectionIdsInterceptors() ?? []
    )
  }

  public func batchWrite(
    _ request: Google_Firestore_V1_BatchWriteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_BatchWriteResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.batchWrite.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchWriteInterceptors() ?? []
    )
  }

  public func createDocument(
    _ request: Google_Firestore_V1_CreateDocumentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_V1_Document {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_V1_FirestoreClientMetadata.Methods.createDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDocumentInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Google_Firestore_V1_FirestoreAsyncClient: Google_Firestore_V1_FirestoreAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getDocument'.
  func makeGetDocumentInterceptors() -> [ClientInterceptor<Google_Firestore_V1_GetDocumentRequest, Google_Firestore_V1_Document>]

  /// - Returns: Interceptors to use when invoking 'listDocuments'.
  func makeListDocumentsInterceptors() -> [ClientInterceptor<Google_Firestore_V1_ListDocumentsRequest, Google_Firestore_V1_ListDocumentsResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDocument'.
  func makeUpdateDocumentInterceptors() -> [ClientInterceptor<Google_Firestore_V1_UpdateDocumentRequest, Google_Firestore_V1_Document>]

  /// - Returns: Interceptors to use when invoking 'deleteDocument'.
  func makeDeleteDocumentInterceptors() -> [ClientInterceptor<Google_Firestore_V1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'batchGetDocuments'.
  func makeBatchGetDocumentsInterceptors() -> [ClientInterceptor<Google_Firestore_V1_BatchGetDocumentsRequest, Google_Firestore_V1_BatchGetDocumentsResponse>]

  /// - Returns: Interceptors to use when invoking 'beginTransaction'.
  func makeBeginTransactionInterceptors() -> [ClientInterceptor<Google_Firestore_V1_BeginTransactionRequest, Google_Firestore_V1_BeginTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'commit'.
  func makeCommitInterceptors() -> [ClientInterceptor<Google_Firestore_V1_CommitRequest, Google_Firestore_V1_CommitResponse>]

  /// - Returns: Interceptors to use when invoking 'rollback'.
  func makeRollbackInterceptors() -> [ClientInterceptor<Google_Firestore_V1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'runQuery'.
  func makeRunQueryInterceptors() -> [ClientInterceptor<Google_Firestore_V1_RunQueryRequest, Google_Firestore_V1_RunQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'runAggregationQuery'.
  func makeRunAggregationQueryInterceptors() -> [ClientInterceptor<Google_Firestore_V1_RunAggregationQueryRequest, Google_Firestore_V1_RunAggregationQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'partitionQuery'.
  func makePartitionQueryInterceptors() -> [ClientInterceptor<Google_Firestore_V1_PartitionQueryRequest, Google_Firestore_V1_PartitionQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'write'.
  func makeWriteInterceptors() -> [ClientInterceptor<Google_Firestore_V1_WriteRequest, Google_Firestore_V1_WriteResponse>]

  /// - Returns: Interceptors to use when invoking 'listen'.
  func makeListenInterceptors() -> [ClientInterceptor<Google_Firestore_V1_ListenRequest, Google_Firestore_V1_ListenResponse>]

  /// - Returns: Interceptors to use when invoking 'listCollectionIds'.
  func makeListCollectionIdsInterceptors() -> [ClientInterceptor<Google_Firestore_V1_ListCollectionIdsRequest, Google_Firestore_V1_ListCollectionIdsResponse>]

  /// - Returns: Interceptors to use when invoking 'batchWrite'.
  func makeBatchWriteInterceptors() -> [ClientInterceptor<Google_Firestore_V1_BatchWriteRequest, Google_Firestore_V1_BatchWriteResponse>]

  /// - Returns: Interceptors to use when invoking 'createDocument'.
  func makeCreateDocumentInterceptors() -> [ClientInterceptor<Google_Firestore_V1_CreateDocumentRequest, Google_Firestore_V1_Document>]
}

public enum Google_Firestore_V1_FirestoreClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Firestore",
    fullName: "google.firestore.v1.Firestore",
    methods: [
      Google_Firestore_V1_FirestoreClientMetadata.Methods.getDocument,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.listDocuments,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.updateDocument,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.deleteDocument,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.batchGetDocuments,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.beginTransaction,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.commit,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.rollback,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.runQuery,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.runAggregationQuery,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.partitionQuery,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.write,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.listen,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.listCollectionIds,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.batchWrite,
      Google_Firestore_V1_FirestoreClientMetadata.Methods.createDocument,
    ]
  )

  public enum Methods {
    public static let getDocument = GRPCMethodDescriptor(
      name: "GetDocument",
      path: "/google.firestore.v1.Firestore/GetDocument",
      type: GRPCCallType.unary
    )

    public static let listDocuments = GRPCMethodDescriptor(
      name: "ListDocuments",
      path: "/google.firestore.v1.Firestore/ListDocuments",
      type: GRPCCallType.unary
    )

    public static let updateDocument = GRPCMethodDescriptor(
      name: "UpdateDocument",
      path: "/google.firestore.v1.Firestore/UpdateDocument",
      type: GRPCCallType.unary
    )

    public static let deleteDocument = GRPCMethodDescriptor(
      name: "DeleteDocument",
      path: "/google.firestore.v1.Firestore/DeleteDocument",
      type: GRPCCallType.unary
    )

    public static let batchGetDocuments = GRPCMethodDescriptor(
      name: "BatchGetDocuments",
      path: "/google.firestore.v1.Firestore/BatchGetDocuments",
      type: GRPCCallType.serverStreaming
    )

    public static let beginTransaction = GRPCMethodDescriptor(
      name: "BeginTransaction",
      path: "/google.firestore.v1.Firestore/BeginTransaction",
      type: GRPCCallType.unary
    )

    public static let commit = GRPCMethodDescriptor(
      name: "Commit",
      path: "/google.firestore.v1.Firestore/Commit",
      type: GRPCCallType.unary
    )

    public static let rollback = GRPCMethodDescriptor(
      name: "Rollback",
      path: "/google.firestore.v1.Firestore/Rollback",
      type: GRPCCallType.unary
    )

    public static let runQuery = GRPCMethodDescriptor(
      name: "RunQuery",
      path: "/google.firestore.v1.Firestore/RunQuery",
      type: GRPCCallType.serverStreaming
    )

    public static let runAggregationQuery = GRPCMethodDescriptor(
      name: "RunAggregationQuery",
      path: "/google.firestore.v1.Firestore/RunAggregationQuery",
      type: GRPCCallType.serverStreaming
    )

    public static let partitionQuery = GRPCMethodDescriptor(
      name: "PartitionQuery",
      path: "/google.firestore.v1.Firestore/PartitionQuery",
      type: GRPCCallType.unary
    )

    public static let write = GRPCMethodDescriptor(
      name: "Write",
      path: "/google.firestore.v1.Firestore/Write",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let listen = GRPCMethodDescriptor(
      name: "Listen",
      path: "/google.firestore.v1.Firestore/Listen",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let listCollectionIds = GRPCMethodDescriptor(
      name: "ListCollectionIds",
      path: "/google.firestore.v1.Firestore/ListCollectionIds",
      type: GRPCCallType.unary
    )

    public static let batchWrite = GRPCMethodDescriptor(
      name: "BatchWrite",
      path: "/google.firestore.v1.Firestore/BatchWrite",
      type: GRPCCallType.unary
    )

    public static let createDocument = GRPCMethodDescriptor(
      name: "CreateDocument",
      path: "/google.firestore.v1.Firestore/CreateDocument",
      type: GRPCCallType.unary
    )
  }
}

/// The Cloud Firestore service.
///
/// Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
/// document database that simplifies storing, syncing, and querying data for
/// your mobile, web, and IoT apps at global scale. Its client libraries provide
/// live synchronization and offline support, while its security features and
/// integrations with Firebase and Google Cloud Platform accelerate building
/// truly serverless apps.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Firestore_V1_FirestoreProvider: CallHandlerProvider {
  var interceptors: Google_Firestore_V1_FirestoreServerInterceptorFactoryProtocol? { get }

  /// Gets a single document.
  func getDocument(request: Google_Firestore_V1_GetDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_Document>

  /// Lists documents.
  func listDocuments(request: Google_Firestore_V1_ListDocumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_ListDocumentsResponse>

  /// Updates or inserts a document.
  func updateDocument(request: Google_Firestore_V1_UpdateDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_Document>

  /// Deletes a document.
  func deleteDocument(request: Google_Firestore_V1_DeleteDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Gets multiple documents.
  ///
  /// Documents returned by this method are not guaranteed to be returned in the
  /// same order that they were requested.
  func batchGetDocuments(request: Google_Firestore_V1_BatchGetDocumentsRequest, context: StreamingResponseCallContext<Google_Firestore_V1_BatchGetDocumentsResponse>) -> EventLoopFuture<GRPCStatus>

  /// Starts a new transaction.
  func beginTransaction(request: Google_Firestore_V1_BeginTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_BeginTransactionResponse>

  /// Commits a transaction, while optionally updating documents.
  func commit(request: Google_Firestore_V1_CommitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_CommitResponse>

  /// Rolls back a transaction.
  func rollback(request: Google_Firestore_V1_RollbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Runs a query.
  func runQuery(request: Google_Firestore_V1_RunQueryRequest, context: StreamingResponseCallContext<Google_Firestore_V1_RunQueryResponse>) -> EventLoopFuture<GRPCStatus>

  /// Runs an aggregation query.
  ///
  /// Rather than producing [Document][google.firestore.v1.Document] results like
  /// [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
  /// allows running an aggregation to produce a series of
  /// [AggregationResult][google.firestore.v1.AggregationResult] server-side.
  ///
  /// High-Level Example:
  ///
  /// ```
  /// -- Return the number of documents in table given a filter.
  /// SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
  /// ```
  func runAggregationQuery(request: Google_Firestore_V1_RunAggregationQueryRequest, context: StreamingResponseCallContext<Google_Firestore_V1_RunAggregationQueryResponse>) -> EventLoopFuture<GRPCStatus>

  /// Partitions a query by returning partition cursors that can be used to run
  /// the query in parallel. The returned partition cursors are split points that
  /// can be used by RunQuery as starting/end points for the query results.
  func partitionQuery(request: Google_Firestore_V1_PartitionQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_PartitionQueryResponse>

  /// Streams batches of document updates and deletes, in order. This method is
  /// only available via the gRPC API (not REST).
  func write(context: StreamingResponseCallContext<Google_Firestore_V1_WriteResponse>) -> EventLoopFuture<(StreamEvent<Google_Firestore_V1_WriteRequest>) -> Void>

  /// Listens to changes. This method is only available via the gRPC API (not
  /// REST).
  func listen(context: StreamingResponseCallContext<Google_Firestore_V1_ListenResponse>) -> EventLoopFuture<(StreamEvent<Google_Firestore_V1_ListenRequest>) -> Void>

  /// Lists all the collection IDs underneath a document.
  func listCollectionIds(request: Google_Firestore_V1_ListCollectionIdsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_ListCollectionIdsResponse>

  /// Applies a batch of write operations.
  ///
  /// The BatchWrite method does not apply the write operations atomically
  /// and can apply them out of order. Method does not allow more than one write
  /// per document. Each write succeeds or fails independently. See the
  /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
  /// success status of each write.
  ///
  /// If you require an atomically applied set of writes, use
  /// [Commit][google.firestore.v1.Firestore.Commit] instead.
  func batchWrite(request: Google_Firestore_V1_BatchWriteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_BatchWriteResponse>

  /// Creates a new document.
  func createDocument(request: Google_Firestore_V1_CreateDocumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_V1_Document>
}

extension Google_Firestore_V1_FirestoreProvider {
  public var serviceName: Substring {
    return Google_Firestore_V1_FirestoreServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetDocument":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_GetDocumentRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_Document>(),
        interceptors: self.interceptors?.makeGetDocumentInterceptors() ?? [],
        userFunction: self.getDocument(request:context:)
      )

    case "ListDocuments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_ListDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_ListDocumentsResponse>(),
        interceptors: self.interceptors?.makeListDocumentsInterceptors() ?? [],
        userFunction: self.listDocuments(request:context:)
      )

    case "UpdateDocument":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_UpdateDocumentRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_Document>(),
        interceptors: self.interceptors?.makeUpdateDocumentInterceptors() ?? [],
        userFunction: self.updateDocument(request:context:)
      )

    case "DeleteDocument":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_DeleteDocumentRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? [],
        userFunction: self.deleteDocument(request:context:)
      )

    case "BatchGetDocuments":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_BatchGetDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_BatchGetDocumentsResponse>(),
        interceptors: self.interceptors?.makeBatchGetDocumentsInterceptors() ?? [],
        userFunction: self.batchGetDocuments(request:context:)
      )

    case "BeginTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_BeginTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_BeginTransactionResponse>(),
        interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? [],
        userFunction: self.beginTransaction(request:context:)
      )

    case "Commit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_CommitRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_CommitResponse>(),
        interceptors: self.interceptors?.makeCommitInterceptors() ?? [],
        userFunction: self.commit(request:context:)
      )

    case "Rollback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_RollbackRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeRollbackInterceptors() ?? [],
        userFunction: self.rollback(request:context:)
      )

    case "RunQuery":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_RunQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_RunQueryResponse>(),
        interceptors: self.interceptors?.makeRunQueryInterceptors() ?? [],
        userFunction: self.runQuery(request:context:)
      )

    case "RunAggregationQuery":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_RunAggregationQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_RunAggregationQueryResponse>(),
        interceptors: self.interceptors?.makeRunAggregationQueryInterceptors() ?? [],
        userFunction: self.runAggregationQuery(request:context:)
      )

    case "PartitionQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_PartitionQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_PartitionQueryResponse>(),
        interceptors: self.interceptors?.makePartitionQueryInterceptors() ?? [],
        userFunction: self.partitionQuery(request:context:)
      )

    case "Write":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_WriteRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_WriteResponse>(),
        interceptors: self.interceptors?.makeWriteInterceptors() ?? [],
        observerFactory: self.write(context:)
      )

    case "Listen":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_ListenRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_ListenResponse>(),
        interceptors: self.interceptors?.makeListenInterceptors() ?? [],
        observerFactory: self.listen(context:)
      )

    case "ListCollectionIds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_ListCollectionIdsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_ListCollectionIdsResponse>(),
        interceptors: self.interceptors?.makeListCollectionIdsInterceptors() ?? [],
        userFunction: self.listCollectionIds(request:context:)
      )

    case "BatchWrite":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_BatchWriteRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_BatchWriteResponse>(),
        interceptors: self.interceptors?.makeBatchWriteInterceptors() ?? [],
        userFunction: self.batchWrite(request:context:)
      )

    case "CreateDocument":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_CreateDocumentRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_Document>(),
        interceptors: self.interceptors?.makeCreateDocumentInterceptors() ?? [],
        userFunction: self.createDocument(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// The Cloud Firestore service.
///
/// Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
/// document database that simplifies storing, syncing, and querying data for
/// your mobile, web, and IoT apps at global scale. Its client libraries provide
/// live synchronization and offline support, while its security features and
/// integrations with Firebase and Google Cloud Platform accelerate building
/// truly serverless apps.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firestore_V1_FirestoreAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firestore_V1_FirestoreServerInterceptorFactoryProtocol? { get }

  /// Gets a single document.
  @Sendable func getDocument(
    request: Google_Firestore_V1_GetDocumentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_Document

  /// Lists documents.
  @Sendable func listDocuments(
    request: Google_Firestore_V1_ListDocumentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_ListDocumentsResponse

  /// Updates or inserts a document.
  @Sendable func updateDocument(
    request: Google_Firestore_V1_UpdateDocumentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_Document

  /// Deletes a document.
  @Sendable func deleteDocument(
    request: Google_Firestore_V1_DeleteDocumentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Gets multiple documents.
  ///
  /// Documents returned by this method are not guaranteed to be returned in the
  /// same order that they were requested.
  @Sendable func batchGetDocuments(
    request: Google_Firestore_V1_BatchGetDocumentsRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Google_Firestore_V1_BatchGetDocumentsResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Starts a new transaction.
  @Sendable func beginTransaction(
    request: Google_Firestore_V1_BeginTransactionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_BeginTransactionResponse

  /// Commits a transaction, while optionally updating documents.
  @Sendable func commit(
    request: Google_Firestore_V1_CommitRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_CommitResponse

  /// Rolls back a transaction.
  @Sendable func rollback(
    request: Google_Firestore_V1_RollbackRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Runs a query.
  @Sendable func runQuery(
    request: Google_Firestore_V1_RunQueryRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Google_Firestore_V1_RunQueryResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Runs an aggregation query.
  ///
  /// Rather than producing [Document][google.firestore.v1.Document] results like
  /// [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
  /// allows running an aggregation to produce a series of
  /// [AggregationResult][google.firestore.v1.AggregationResult] server-side.
  ///
  /// High-Level Example:
  ///
  /// ```
  /// -- Return the number of documents in table given a filter.
  /// SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
  /// ```
  @Sendable func runAggregationQuery(
    request: Google_Firestore_V1_RunAggregationQueryRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Google_Firestore_V1_RunAggregationQueryResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Partitions a query by returning partition cursors that can be used to run
  /// the query in parallel. The returned partition cursors are split points that
  /// can be used by RunQuery as starting/end points for the query results.
  @Sendable func partitionQuery(
    request: Google_Firestore_V1_PartitionQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_PartitionQueryResponse

  /// Streams batches of document updates and deletes, in order. This method is
  /// only available via the gRPC API (not REST).
  @Sendable func write(
    requestStream: GRPCAsyncRequestStream<Google_Firestore_V1_WriteRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Google_Firestore_V1_WriteResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Listens to changes. This method is only available via the gRPC API (not
  /// REST).
  @Sendable func listen(
    requestStream: GRPCAsyncRequestStream<Google_Firestore_V1_ListenRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Google_Firestore_V1_ListenResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Lists all the collection IDs underneath a document.
  @Sendable func listCollectionIds(
    request: Google_Firestore_V1_ListCollectionIdsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_ListCollectionIdsResponse

  /// Applies a batch of write operations.
  ///
  /// The BatchWrite method does not apply the write operations atomically
  /// and can apply them out of order. Method does not allow more than one write
  /// per document. Each write succeeds or fails independently. See the
  /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
  /// success status of each write.
  ///
  /// If you require an atomically applied set of writes, use
  /// [Commit][google.firestore.v1.Firestore.Commit] instead.
  @Sendable func batchWrite(
    request: Google_Firestore_V1_BatchWriteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_BatchWriteResponse

  /// Creates a new document.
  @Sendable func createDocument(
    request: Google_Firestore_V1_CreateDocumentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_V1_Document
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firestore_V1_FirestoreAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firestore_V1_FirestoreServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Google_Firestore_V1_FirestoreServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Google_Firestore_V1_FirestoreServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetDocument":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_GetDocumentRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_Document>(),
        interceptors: self.interceptors?.makeGetDocumentInterceptors() ?? [],
        wrapping: self.getDocument(request:context:)
      )

    case "ListDocuments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_ListDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_ListDocumentsResponse>(),
        interceptors: self.interceptors?.makeListDocumentsInterceptors() ?? [],
        wrapping: self.listDocuments(request:context:)
      )

    case "UpdateDocument":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_UpdateDocumentRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_Document>(),
        interceptors: self.interceptors?.makeUpdateDocumentInterceptors() ?? [],
        wrapping: self.updateDocument(request:context:)
      )

    case "DeleteDocument":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_DeleteDocumentRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? [],
        wrapping: self.deleteDocument(request:context:)
      )

    case "BatchGetDocuments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_BatchGetDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_BatchGetDocumentsResponse>(),
        interceptors: self.interceptors?.makeBatchGetDocumentsInterceptors() ?? [],
        wrapping: self.batchGetDocuments(request:responseStream:context:)
      )

    case "BeginTransaction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_BeginTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_BeginTransactionResponse>(),
        interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? [],
        wrapping: self.beginTransaction(request:context:)
      )

    case "Commit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_CommitRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_CommitResponse>(),
        interceptors: self.interceptors?.makeCommitInterceptors() ?? [],
        wrapping: self.commit(request:context:)
      )

    case "Rollback":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_RollbackRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeRollbackInterceptors() ?? [],
        wrapping: self.rollback(request:context:)
      )

    case "RunQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_RunQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_RunQueryResponse>(),
        interceptors: self.interceptors?.makeRunQueryInterceptors() ?? [],
        wrapping: self.runQuery(request:responseStream:context:)
      )

    case "RunAggregationQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_RunAggregationQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_RunAggregationQueryResponse>(),
        interceptors: self.interceptors?.makeRunAggregationQueryInterceptors() ?? [],
        wrapping: self.runAggregationQuery(request:responseStream:context:)
      )

    case "PartitionQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_PartitionQueryRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_PartitionQueryResponse>(),
        interceptors: self.interceptors?.makePartitionQueryInterceptors() ?? [],
        wrapping: self.partitionQuery(request:context:)
      )

    case "Write":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_WriteRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_WriteResponse>(),
        interceptors: self.interceptors?.makeWriteInterceptors() ?? [],
        wrapping: self.write(requestStream:responseStream:context:)
      )

    case "Listen":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_ListenRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_ListenResponse>(),
        interceptors: self.interceptors?.makeListenInterceptors() ?? [],
        wrapping: self.listen(requestStream:responseStream:context:)
      )

    case "ListCollectionIds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_ListCollectionIdsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_ListCollectionIdsResponse>(),
        interceptors: self.interceptors?.makeListCollectionIdsInterceptors() ?? [],
        wrapping: self.listCollectionIds(request:context:)
      )

    case "BatchWrite":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_BatchWriteRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_BatchWriteResponse>(),
        interceptors: self.interceptors?.makeBatchWriteInterceptors() ?? [],
        wrapping: self.batchWrite(request:context:)
      )

    case "CreateDocument":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_V1_CreateDocumentRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_V1_Document>(),
        interceptors: self.interceptors?.makeCreateDocumentInterceptors() ?? [],
        wrapping: self.createDocument(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Google_Firestore_V1_FirestoreServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getDocument'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDocumentInterceptors() -> [ServerInterceptor<Google_Firestore_V1_GetDocumentRequest, Google_Firestore_V1_Document>]

  /// - Returns: Interceptors to use when handling 'listDocuments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListDocumentsInterceptors() -> [ServerInterceptor<Google_Firestore_V1_ListDocumentsRequest, Google_Firestore_V1_ListDocumentsResponse>]

  /// - Returns: Interceptors to use when handling 'updateDocument'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDocumentInterceptors() -> [ServerInterceptor<Google_Firestore_V1_UpdateDocumentRequest, Google_Firestore_V1_Document>]

  /// - Returns: Interceptors to use when handling 'deleteDocument'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteDocumentInterceptors() -> [ServerInterceptor<Google_Firestore_V1_DeleteDocumentRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'batchGetDocuments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchGetDocumentsInterceptors() -> [ServerInterceptor<Google_Firestore_V1_BatchGetDocumentsRequest, Google_Firestore_V1_BatchGetDocumentsResponse>]

  /// - Returns: Interceptors to use when handling 'beginTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBeginTransactionInterceptors() -> [ServerInterceptor<Google_Firestore_V1_BeginTransactionRequest, Google_Firestore_V1_BeginTransactionResponse>]

  /// - Returns: Interceptors to use when handling 'commit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCommitInterceptors() -> [ServerInterceptor<Google_Firestore_V1_CommitRequest, Google_Firestore_V1_CommitResponse>]

  /// - Returns: Interceptors to use when handling 'rollback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRollbackInterceptors() -> [ServerInterceptor<Google_Firestore_V1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'runQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunQueryInterceptors() -> [ServerInterceptor<Google_Firestore_V1_RunQueryRequest, Google_Firestore_V1_RunQueryResponse>]

  /// - Returns: Interceptors to use when handling 'runAggregationQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunAggregationQueryInterceptors() -> [ServerInterceptor<Google_Firestore_V1_RunAggregationQueryRequest, Google_Firestore_V1_RunAggregationQueryResponse>]

  /// - Returns: Interceptors to use when handling 'partitionQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePartitionQueryInterceptors() -> [ServerInterceptor<Google_Firestore_V1_PartitionQueryRequest, Google_Firestore_V1_PartitionQueryResponse>]

  /// - Returns: Interceptors to use when handling 'write'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteInterceptors() -> [ServerInterceptor<Google_Firestore_V1_WriteRequest, Google_Firestore_V1_WriteResponse>]

  /// - Returns: Interceptors to use when handling 'listen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenInterceptors() -> [ServerInterceptor<Google_Firestore_V1_ListenRequest, Google_Firestore_V1_ListenResponse>]

  /// - Returns: Interceptors to use when handling 'listCollectionIds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListCollectionIdsInterceptors() -> [ServerInterceptor<Google_Firestore_V1_ListCollectionIdsRequest, Google_Firestore_V1_ListCollectionIdsResponse>]

  /// - Returns: Interceptors to use when handling 'batchWrite'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchWriteInterceptors() -> [ServerInterceptor<Google_Firestore_V1_BatchWriteRequest, Google_Firestore_V1_BatchWriteResponse>]

  /// - Returns: Interceptors to use when handling 'createDocument'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDocumentInterceptors() -> [ServerInterceptor<Google_Firestore_V1_CreateDocumentRequest, Google_Firestore_V1_Document>]
}

public enum Google_Firestore_V1_FirestoreServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Firestore",
    fullName: "google.firestore.v1.Firestore",
    methods: [
      Google_Firestore_V1_FirestoreServerMetadata.Methods.getDocument,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.listDocuments,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.updateDocument,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.deleteDocument,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.batchGetDocuments,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.beginTransaction,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.commit,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.rollback,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.runQuery,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.runAggregationQuery,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.partitionQuery,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.write,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.listen,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.listCollectionIds,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.batchWrite,
      Google_Firestore_V1_FirestoreServerMetadata.Methods.createDocument,
    ]
  )

  public enum Methods {
    public static let getDocument = GRPCMethodDescriptor(
      name: "GetDocument",
      path: "/google.firestore.v1.Firestore/GetDocument",
      type: GRPCCallType.unary
    )

    public static let listDocuments = GRPCMethodDescriptor(
      name: "ListDocuments",
      path: "/google.firestore.v1.Firestore/ListDocuments",
      type: GRPCCallType.unary
    )

    public static let updateDocument = GRPCMethodDescriptor(
      name: "UpdateDocument",
      path: "/google.firestore.v1.Firestore/UpdateDocument",
      type: GRPCCallType.unary
    )

    public static let deleteDocument = GRPCMethodDescriptor(
      name: "DeleteDocument",
      path: "/google.firestore.v1.Firestore/DeleteDocument",
      type: GRPCCallType.unary
    )

    public static let batchGetDocuments = GRPCMethodDescriptor(
      name: "BatchGetDocuments",
      path: "/google.firestore.v1.Firestore/BatchGetDocuments",
      type: GRPCCallType.serverStreaming
    )

    public static let beginTransaction = GRPCMethodDescriptor(
      name: "BeginTransaction",
      path: "/google.firestore.v1.Firestore/BeginTransaction",
      type: GRPCCallType.unary
    )

    public static let commit = GRPCMethodDescriptor(
      name: "Commit",
      path: "/google.firestore.v1.Firestore/Commit",
      type: GRPCCallType.unary
    )

    public static let rollback = GRPCMethodDescriptor(
      name: "Rollback",
      path: "/google.firestore.v1.Firestore/Rollback",
      type: GRPCCallType.unary
    )

    public static let runQuery = GRPCMethodDescriptor(
      name: "RunQuery",
      path: "/google.firestore.v1.Firestore/RunQuery",
      type: GRPCCallType.serverStreaming
    )

    public static let runAggregationQuery = GRPCMethodDescriptor(
      name: "RunAggregationQuery",
      path: "/google.firestore.v1.Firestore/RunAggregationQuery",
      type: GRPCCallType.serverStreaming
    )

    public static let partitionQuery = GRPCMethodDescriptor(
      name: "PartitionQuery",
      path: "/google.firestore.v1.Firestore/PartitionQuery",
      type: GRPCCallType.unary
    )

    public static let write = GRPCMethodDescriptor(
      name: "Write",
      path: "/google.firestore.v1.Firestore/Write",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let listen = GRPCMethodDescriptor(
      name: "Listen",
      path: "/google.firestore.v1.Firestore/Listen",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let listCollectionIds = GRPCMethodDescriptor(
      name: "ListCollectionIds",
      path: "/google.firestore.v1.Firestore/ListCollectionIds",
      type: GRPCCallType.unary
    )

    public static let batchWrite = GRPCMethodDescriptor(
      name: "BatchWrite",
      path: "/google.firestore.v1.Firestore/BatchWrite",
      type: GRPCCallType.unary
    )

    public static let createDocument = GRPCMethodDescriptor(
      name: "CreateDocument",
      path: "/google.firestore.v1.Firestore/CreateDocument",
      type: GRPCCallType.unary
    )
  }
}
