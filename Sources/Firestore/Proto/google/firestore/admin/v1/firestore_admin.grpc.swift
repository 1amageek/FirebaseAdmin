//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/firestore/admin/v1/firestore_admin.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The Cloud Firestore Admin API.
///
/// This API provides several administrative services for Cloud Firestore.
///
/// Project, Database, Namespace, Collection, Collection Group, and Document are
/// used as defined in the Google Cloud Firestore API.
///
/// Operation: An Operation represents work being performed in the background.
///
/// The index service manages Cloud Firestore indexes.
///
/// Index creation is performed asynchronously.
/// An Operation resource is created for each such asynchronous operation.
/// The state of the operation (including any errors encountered)
/// may be queried via the Operation resource.
///
/// The Operations collection provides a record of actions performed for the
/// specified Project (including any Operations in progress). Operations are not
/// created directly but through calls on other collections or resources.
///
/// An Operation that is done may be deleted so that it is no longer listed as
/// part of the Operation collection. Operations are garbage collected after
/// 30 days. By default, ListOperations will only return in progress and failed
/// operations. To list completed operation, issue a ListOperations request with
/// the filter `done: true`.
///
/// Operations are created by service `FirestoreAdmin`, but are accessed via
/// service `google.longrunning.Operations`.
///
/// Usage: instantiate `Google_Firestore_Admin_V1_FirestoreAdminClient`, then call methods of this protocol to make API calls.
public protocol Google_Firestore_Admin_V1_FirestoreAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol? { get }

  func createIndex(
    _ request: Google_Firestore_Admin_V1_CreateIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_CreateIndexRequest, Google_Longrunning_Operation>

  func listIndexes(
    _ request: Google_Firestore_Admin_V1_ListIndexesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_ListIndexesRequest, Google_Firestore_Admin_V1_ListIndexesResponse>

  func getIndex(
    _ request: Google_Firestore_Admin_V1_GetIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_GetIndexRequest, Google_Firestore_Admin_V1_Index>

  func deleteIndex(
    _ request: Google_Firestore_Admin_V1_DeleteIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_DeleteIndexRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getField(
    _ request: Google_Firestore_Admin_V1_GetFieldRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_GetFieldRequest, Google_Firestore_Admin_V1_Field>

  func updateField(
    _ request: Google_Firestore_Admin_V1_UpdateFieldRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_UpdateFieldRequest, Google_Longrunning_Operation>

  func listFields(
    _ request: Google_Firestore_Admin_V1_ListFieldsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_ListFieldsRequest, Google_Firestore_Admin_V1_ListFieldsResponse>

  func exportDocuments(
    _ request: Google_Firestore_Admin_V1_ExportDocumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_ExportDocumentsRequest, Google_Longrunning_Operation>

  func importDocuments(
    _ request: Google_Firestore_Admin_V1_ImportDocumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_ImportDocumentsRequest, Google_Longrunning_Operation>

  func getDatabase(
    _ request: Google_Firestore_Admin_V1_GetDatabaseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_GetDatabaseRequest, Google_Firestore_Admin_V1_Database>

  func listDatabases(
    _ request: Google_Firestore_Admin_V1_ListDatabasesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_ListDatabasesRequest, Google_Firestore_Admin_V1_ListDatabasesResponse>

  func updateDatabase(
    _ request: Google_Firestore_Admin_V1_UpdateDatabaseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Firestore_Admin_V1_UpdateDatabaseRequest, Google_Longrunning_Operation>
}

extension Google_Firestore_Admin_V1_FirestoreAdminClientProtocol {
  public var serviceName: String {
    return "google.firestore.admin.v1.FirestoreAdmin"
  }

  /// Creates a composite index. This returns a [google.longrunning.Operation][google.longrunning.Operation]
  /// which may be used to track the status of the creation. The metadata for
  /// the operation will be the type [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createIndex(
    _ request: Google_Firestore_Admin_V1_CreateIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_CreateIndexRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.createIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? []
    )
  }

  /// Lists composite indexes.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListIndexes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listIndexes(
    _ request: Google_Firestore_Admin_V1_ListIndexesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_ListIndexesRequest, Google_Firestore_Admin_V1_ListIndexesResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListIndexesInterceptors() ?? []
    )
  }

  /// Gets a composite index.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIndex(
    _ request: Google_Firestore_Admin_V1_GetIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_GetIndexRequest, Google_Firestore_Admin_V1_Index> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIndexInterceptors() ?? []
    )
  }

  /// Deletes a composite index.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteIndex(
    _ request: Google_Firestore_Admin_V1_DeleteIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_DeleteIndexRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.deleteIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? []
    )
  }

  /// Gets the metadata and configuration for a Field.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetField.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getField(
    _ request: Google_Firestore_Admin_V1_GetFieldRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_GetFieldRequest, Google_Firestore_Admin_V1_Field> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getField.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFieldInterceptors() ?? []
    )
  }

  /// Updates a field configuration. Currently, field updates apply only to
  /// single field index configuration. However, calls to
  /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField] should provide a field mask to avoid
  /// changing any configuration that the caller isn't aware of. The field mask
  /// should be specified as: `{ paths: "index_config" }`.
  ///
  /// This call returns a [google.longrunning.Operation][google.longrunning.Operation] which may be used to
  /// track the status of the field update. The metadata for
  /// the operation will be the type [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
  ///
  /// To configure the default field settings for the database, use
  /// the special `Field` with resource name:
  /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateField.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateField(
    _ request: Google_Firestore_Admin_V1_UpdateFieldRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_UpdateFieldRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateField.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFieldInterceptors() ?? []
    )
  }

  /// Lists the field configuration and metadata for this database.
  ///
  /// Currently, [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] only supports listing fields
  /// that have been explicitly overridden. To issue this query, call
  /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] with the filter set to
  /// `indexConfig.usesAncestorConfig:false` .
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFields.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listFields(
    _ request: Google_Firestore_Admin_V1_ListFieldsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_ListFieldsRequest, Google_Firestore_Admin_V1_ListFieldsResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listFields.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFieldsInterceptors() ?? []
    )
  }

  /// Exports a copy of all or a subset of documents from Google Cloud Firestore
  /// to another storage system, such as Google Cloud Storage. Recent updates to
  /// documents may not be reflected in the export. The export occurs in the
  /// background and its progress can be monitored and managed via the
  /// Operation resource that is created. The output of an export may only be
  /// used once the associated operation is done. If an export operation is
  /// cancelled before completion it may leave partial data behind in Google
  /// Cloud Storage.
  ///
  /// For more details on export behavior and output format, refer to:
  /// https://cloud.google.com/firestore/docs/manage-data/export-import
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportDocuments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exportDocuments(
    _ request: Google_Firestore_Admin_V1_ExportDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_ExportDocumentsRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.exportDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportDocumentsInterceptors() ?? []
    )
  }

  /// Imports documents into Google Cloud Firestore. Existing documents with the
  /// same name are overwritten. The import occurs in the background and its
  /// progress can be monitored and managed via the Operation resource that is
  /// created. If an ImportDocuments operation is cancelled, it is possible
  /// that a subset of the data has already been imported to Cloud Firestore.
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportDocuments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func importDocuments(
    _ request: Google_Firestore_Admin_V1_ImportDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_ImportDocumentsRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.importDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportDocumentsInterceptors() ?? []
    )
  }

  /// Gets information about a database.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDatabase.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDatabase(
    _ request: Google_Firestore_Admin_V1_GetDatabaseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_GetDatabaseRequest, Google_Firestore_Admin_V1_Database> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getDatabase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDatabaseInterceptors() ?? []
    )
  }

  /// List all the databases in the project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDatabases.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDatabases(
    _ request: Google_Firestore_Admin_V1_ListDatabasesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_ListDatabasesRequest, Google_Firestore_Admin_V1_ListDatabasesResponse> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listDatabases.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDatabasesInterceptors() ?? []
    )
  }

  /// Updates a database.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDatabase.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDatabase(
    _ request: Google_Firestore_Admin_V1_UpdateDatabaseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Firestore_Admin_V1_UpdateDatabaseRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateDatabase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDatabaseInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Google_Firestore_Admin_V1_FirestoreAdminClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Google_Firestore_Admin_V1_FirestoreAdminNIOClient")
public final class Google_Firestore_Admin_V1_FirestoreAdminClient: Google_Firestore_Admin_V1_FirestoreAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.firestore.admin.v1.FirestoreAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Google_Firestore_Admin_V1_FirestoreAdminNIOClient: Google_Firestore_Admin_V1_FirestoreAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the google.firestore.admin.v1.FirestoreAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The Cloud Firestore Admin API.
///
/// This API provides several administrative services for Cloud Firestore.
///
/// Project, Database, Namespace, Collection, Collection Group, and Document are
/// used as defined in the Google Cloud Firestore API.
///
/// Operation: An Operation represents work being performed in the background.
///
/// The index service manages Cloud Firestore indexes.
///
/// Index creation is performed asynchronously.
/// An Operation resource is created for each such asynchronous operation.
/// The state of the operation (including any errors encountered)
/// may be queried via the Operation resource.
///
/// The Operations collection provides a record of actions performed for the
/// specified Project (including any Operations in progress). Operations are not
/// created directly but through calls on other collections or resources.
///
/// An Operation that is done may be deleted so that it is no longer listed as
/// part of the Operation collection. Operations are garbage collected after
/// 30 days. By default, ListOperations will only return in progress and failed
/// operations. To list completed operation, issue a ListOperations request with
/// the filter `done: true`.
///
/// Operations are created by service `FirestoreAdmin`, but are accessed via
/// service `google.longrunning.Operations`.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firestore_Admin_V1_FirestoreAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol? { get }

  func makeCreateIndexCall(
    _ request: Google_Firestore_Admin_V1_CreateIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_CreateIndexRequest, Google_Longrunning_Operation>

  func makeListIndexesCall(
    _ request: Google_Firestore_Admin_V1_ListIndexesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ListIndexesRequest, Google_Firestore_Admin_V1_ListIndexesResponse>

  func makeGetIndexCall(
    _ request: Google_Firestore_Admin_V1_GetIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_GetIndexRequest, Google_Firestore_Admin_V1_Index>

  func makeDeleteIndexCall(
    _ request: Google_Firestore_Admin_V1_DeleteIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_DeleteIndexRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetFieldCall(
    _ request: Google_Firestore_Admin_V1_GetFieldRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_GetFieldRequest, Google_Firestore_Admin_V1_Field>

  func makeUpdateFieldCall(
    _ request: Google_Firestore_Admin_V1_UpdateFieldRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_UpdateFieldRequest, Google_Longrunning_Operation>

  func makeListFieldsCall(
    _ request: Google_Firestore_Admin_V1_ListFieldsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ListFieldsRequest, Google_Firestore_Admin_V1_ListFieldsResponse>

  func makeExportDocumentsCall(
    _ request: Google_Firestore_Admin_V1_ExportDocumentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ExportDocumentsRequest, Google_Longrunning_Operation>

  func makeImportDocumentsCall(
    _ request: Google_Firestore_Admin_V1_ImportDocumentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ImportDocumentsRequest, Google_Longrunning_Operation>

  func makeGetDatabaseCall(
    _ request: Google_Firestore_Admin_V1_GetDatabaseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_GetDatabaseRequest, Google_Firestore_Admin_V1_Database>

  func makeListDatabasesCall(
    _ request: Google_Firestore_Admin_V1_ListDatabasesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ListDatabasesRequest, Google_Firestore_Admin_V1_ListDatabasesResponse>

  func makeUpdateDatabaseCall(
    _ request: Google_Firestore_Admin_V1_UpdateDatabaseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_UpdateDatabaseRequest, Google_Longrunning_Operation>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firestore_Admin_V1_FirestoreAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateIndexCall(
    _ request: Google_Firestore_Admin_V1_CreateIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_CreateIndexRequest, Google_Longrunning_Operation> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.createIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? []
    )
  }

  public func makeListIndexesCall(
    _ request: Google_Firestore_Admin_V1_ListIndexesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ListIndexesRequest, Google_Firestore_Admin_V1_ListIndexesResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListIndexesInterceptors() ?? []
    )
  }

  public func makeGetIndexCall(
    _ request: Google_Firestore_Admin_V1_GetIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_GetIndexRequest, Google_Firestore_Admin_V1_Index> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIndexInterceptors() ?? []
    )
  }

  public func makeDeleteIndexCall(
    _ request: Google_Firestore_Admin_V1_DeleteIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_DeleteIndexRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.deleteIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? []
    )
  }

  public func makeGetFieldCall(
    _ request: Google_Firestore_Admin_V1_GetFieldRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_GetFieldRequest, Google_Firestore_Admin_V1_Field> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getField.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFieldInterceptors() ?? []
    )
  }

  public func makeUpdateFieldCall(
    _ request: Google_Firestore_Admin_V1_UpdateFieldRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_UpdateFieldRequest, Google_Longrunning_Operation> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateField.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFieldInterceptors() ?? []
    )
  }

  public func makeListFieldsCall(
    _ request: Google_Firestore_Admin_V1_ListFieldsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ListFieldsRequest, Google_Firestore_Admin_V1_ListFieldsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listFields.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFieldsInterceptors() ?? []
    )
  }

  public func makeExportDocumentsCall(
    _ request: Google_Firestore_Admin_V1_ExportDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ExportDocumentsRequest, Google_Longrunning_Operation> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.exportDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportDocumentsInterceptors() ?? []
    )
  }

  public func makeImportDocumentsCall(
    _ request: Google_Firestore_Admin_V1_ImportDocumentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ImportDocumentsRequest, Google_Longrunning_Operation> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.importDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportDocumentsInterceptors() ?? []
    )
  }

  public func makeGetDatabaseCall(
    _ request: Google_Firestore_Admin_V1_GetDatabaseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_GetDatabaseRequest, Google_Firestore_Admin_V1_Database> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getDatabase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDatabaseInterceptors() ?? []
    )
  }

  public func makeListDatabasesCall(
    _ request: Google_Firestore_Admin_V1_ListDatabasesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_ListDatabasesRequest, Google_Firestore_Admin_V1_ListDatabasesResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listDatabases.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDatabasesInterceptors() ?? []
    )
  }

  public func makeUpdateDatabaseCall(
    _ request: Google_Firestore_Admin_V1_UpdateDatabaseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Firestore_Admin_V1_UpdateDatabaseRequest, Google_Longrunning_Operation> {
    return self.makeAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateDatabase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDatabaseInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firestore_Admin_V1_FirestoreAdminAsyncClientProtocol {
  public func createIndex(
    _ request: Google_Firestore_Admin_V1_CreateIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Longrunning_Operation {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.createIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? []
    )
  }

  public func listIndexes(
    _ request: Google_Firestore_Admin_V1_ListIndexesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_Admin_V1_ListIndexesResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListIndexesInterceptors() ?? []
    )
  }

  public func getIndex(
    _ request: Google_Firestore_Admin_V1_GetIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_Admin_V1_Index {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIndexInterceptors() ?? []
    )
  }

  public func deleteIndex(
    _ request: Google_Firestore_Admin_V1_DeleteIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.deleteIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? []
    )
  }

  public func getField(
    _ request: Google_Firestore_Admin_V1_GetFieldRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_Admin_V1_Field {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getField.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFieldInterceptors() ?? []
    )
  }

  public func updateField(
    _ request: Google_Firestore_Admin_V1_UpdateFieldRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Longrunning_Operation {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateField.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFieldInterceptors() ?? []
    )
  }

  public func listFields(
    _ request: Google_Firestore_Admin_V1_ListFieldsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_Admin_V1_ListFieldsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listFields.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFieldsInterceptors() ?? []
    )
  }

  public func exportDocuments(
    _ request: Google_Firestore_Admin_V1_ExportDocumentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Longrunning_Operation {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.exportDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportDocumentsInterceptors() ?? []
    )
  }

  public func importDocuments(
    _ request: Google_Firestore_Admin_V1_ImportDocumentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Longrunning_Operation {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.importDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportDocumentsInterceptors() ?? []
    )
  }

  public func getDatabase(
    _ request: Google_Firestore_Admin_V1_GetDatabaseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_Admin_V1_Database {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getDatabase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDatabaseInterceptors() ?? []
    )
  }

  public func listDatabases(
    _ request: Google_Firestore_Admin_V1_ListDatabasesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Firestore_Admin_V1_ListDatabasesResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listDatabases.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDatabasesInterceptors() ?? []
    )
  }

  public func updateDatabase(
    _ request: Google_Firestore_Admin_V1_UpdateDatabaseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Longrunning_Operation {
    return try await self.performAsyncUnaryCall(
      path: Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateDatabase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDatabaseInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Google_Firestore_Admin_V1_FirestoreAdminAsyncClient: Google_Firestore_Admin_V1_FirestoreAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Google_Firestore_Admin_V1_FirestoreAdminClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createIndex'.
  func makeCreateIndexInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_CreateIndexRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when invoking 'listIndexes'.
  func makeListIndexesInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_ListIndexesRequest, Google_Firestore_Admin_V1_ListIndexesResponse>]

  /// - Returns: Interceptors to use when invoking 'getIndex'.
  func makeGetIndexInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_GetIndexRequest, Google_Firestore_Admin_V1_Index>]

  /// - Returns: Interceptors to use when invoking 'deleteIndex'.
  func makeDeleteIndexInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_DeleteIndexRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getField'.
  func makeGetFieldInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_GetFieldRequest, Google_Firestore_Admin_V1_Field>]

  /// - Returns: Interceptors to use when invoking 'updateField'.
  func makeUpdateFieldInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_UpdateFieldRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when invoking 'listFields'.
  func makeListFieldsInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_ListFieldsRequest, Google_Firestore_Admin_V1_ListFieldsResponse>]

  /// - Returns: Interceptors to use when invoking 'exportDocuments'.
  func makeExportDocumentsInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_ExportDocumentsRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when invoking 'importDocuments'.
  func makeImportDocumentsInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_ImportDocumentsRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when invoking 'getDatabase'.
  func makeGetDatabaseInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_GetDatabaseRequest, Google_Firestore_Admin_V1_Database>]

  /// - Returns: Interceptors to use when invoking 'listDatabases'.
  func makeListDatabasesInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_ListDatabasesRequest, Google_Firestore_Admin_V1_ListDatabasesResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDatabase'.
  func makeUpdateDatabaseInterceptors() -> [ClientInterceptor<Google_Firestore_Admin_V1_UpdateDatabaseRequest, Google_Longrunning_Operation>]
}

public enum Google_Firestore_Admin_V1_FirestoreAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FirestoreAdmin",
    fullName: "google.firestore.admin.v1.FirestoreAdmin",
    methods: [
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.createIndex,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listIndexes,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getIndex,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.deleteIndex,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getField,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateField,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listFields,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.exportDocuments,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.importDocuments,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.getDatabase,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.listDatabases,
      Google_Firestore_Admin_V1_FirestoreAdminClientMetadata.Methods.updateDatabase,
    ]
  )

  public enum Methods {
    public static let createIndex = GRPCMethodDescriptor(
      name: "CreateIndex",
      path: "/google.firestore.admin.v1.FirestoreAdmin/CreateIndex",
      type: GRPCCallType.unary
    )

    public static let listIndexes = GRPCMethodDescriptor(
      name: "ListIndexes",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ListIndexes",
      type: GRPCCallType.unary
    )

    public static let getIndex = GRPCMethodDescriptor(
      name: "GetIndex",
      path: "/google.firestore.admin.v1.FirestoreAdmin/GetIndex",
      type: GRPCCallType.unary
    )

    public static let deleteIndex = GRPCMethodDescriptor(
      name: "DeleteIndex",
      path: "/google.firestore.admin.v1.FirestoreAdmin/DeleteIndex",
      type: GRPCCallType.unary
    )

    public static let getField = GRPCMethodDescriptor(
      name: "GetField",
      path: "/google.firestore.admin.v1.FirestoreAdmin/GetField",
      type: GRPCCallType.unary
    )

    public static let updateField = GRPCMethodDescriptor(
      name: "UpdateField",
      path: "/google.firestore.admin.v1.FirestoreAdmin/UpdateField",
      type: GRPCCallType.unary
    )

    public static let listFields = GRPCMethodDescriptor(
      name: "ListFields",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ListFields",
      type: GRPCCallType.unary
    )

    public static let exportDocuments = GRPCMethodDescriptor(
      name: "ExportDocuments",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ExportDocuments",
      type: GRPCCallType.unary
    )

    public static let importDocuments = GRPCMethodDescriptor(
      name: "ImportDocuments",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ImportDocuments",
      type: GRPCCallType.unary
    )

    public static let getDatabase = GRPCMethodDescriptor(
      name: "GetDatabase",
      path: "/google.firestore.admin.v1.FirestoreAdmin/GetDatabase",
      type: GRPCCallType.unary
    )

    public static let listDatabases = GRPCMethodDescriptor(
      name: "ListDatabases",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ListDatabases",
      type: GRPCCallType.unary
    )

    public static let updateDatabase = GRPCMethodDescriptor(
      name: "UpdateDatabase",
      path: "/google.firestore.admin.v1.FirestoreAdmin/UpdateDatabase",
      type: GRPCCallType.unary
    )
  }
}

/// The Cloud Firestore Admin API.
///
/// This API provides several administrative services for Cloud Firestore.
///
/// Project, Database, Namespace, Collection, Collection Group, and Document are
/// used as defined in the Google Cloud Firestore API.
///
/// Operation: An Operation represents work being performed in the background.
///
/// The index service manages Cloud Firestore indexes.
///
/// Index creation is performed asynchronously.
/// An Operation resource is created for each such asynchronous operation.
/// The state of the operation (including any errors encountered)
/// may be queried via the Operation resource.
///
/// The Operations collection provides a record of actions performed for the
/// specified Project (including any Operations in progress). Operations are not
/// created directly but through calls on other collections or resources.
///
/// An Operation that is done may be deleted so that it is no longer listed as
/// part of the Operation collection. Operations are garbage collected after
/// 30 days. By default, ListOperations will only return in progress and failed
/// operations. To list completed operation, issue a ListOperations request with
/// the filter `done: true`.
///
/// Operations are created by service `FirestoreAdmin`, but are accessed via
/// service `google.longrunning.Operations`.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Firestore_Admin_V1_FirestoreAdminProvider: CallHandlerProvider {
  var interceptors: Google_Firestore_Admin_V1_FirestoreAdminServerInterceptorFactoryProtocol? { get }

  /// Creates a composite index. This returns a [google.longrunning.Operation][google.longrunning.Operation]
  /// which may be used to track the status of the creation. The metadata for
  /// the operation will be the type [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
  func createIndex(request: Google_Firestore_Admin_V1_CreateIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>

  /// Lists composite indexes.
  func listIndexes(request: Google_Firestore_Admin_V1_ListIndexesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_Admin_V1_ListIndexesResponse>

  /// Gets a composite index.
  func getIndex(request: Google_Firestore_Admin_V1_GetIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_Admin_V1_Index>

  /// Deletes a composite index.
  func deleteIndex(request: Google_Firestore_Admin_V1_DeleteIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Gets the metadata and configuration for a Field.
  func getField(request: Google_Firestore_Admin_V1_GetFieldRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_Admin_V1_Field>

  /// Updates a field configuration. Currently, field updates apply only to
  /// single field index configuration. However, calls to
  /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField] should provide a field mask to avoid
  /// changing any configuration that the caller isn't aware of. The field mask
  /// should be specified as: `{ paths: "index_config" }`.
  ///
  /// This call returns a [google.longrunning.Operation][google.longrunning.Operation] which may be used to
  /// track the status of the field update. The metadata for
  /// the operation will be the type [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
  ///
  /// To configure the default field settings for the database, use
  /// the special `Field` with resource name:
  /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
  func updateField(request: Google_Firestore_Admin_V1_UpdateFieldRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>

  /// Lists the field configuration and metadata for this database.
  ///
  /// Currently, [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] only supports listing fields
  /// that have been explicitly overridden. To issue this query, call
  /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] with the filter set to
  /// `indexConfig.usesAncestorConfig:false` .
  func listFields(request: Google_Firestore_Admin_V1_ListFieldsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_Admin_V1_ListFieldsResponse>

  /// Exports a copy of all or a subset of documents from Google Cloud Firestore
  /// to another storage system, such as Google Cloud Storage. Recent updates to
  /// documents may not be reflected in the export. The export occurs in the
  /// background and its progress can be monitored and managed via the
  /// Operation resource that is created. The output of an export may only be
  /// used once the associated operation is done. If an export operation is
  /// cancelled before completion it may leave partial data behind in Google
  /// Cloud Storage.
  ///
  /// For more details on export behavior and output format, refer to:
  /// https://cloud.google.com/firestore/docs/manage-data/export-import
  func exportDocuments(request: Google_Firestore_Admin_V1_ExportDocumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>

  /// Imports documents into Google Cloud Firestore. Existing documents with the
  /// same name are overwritten. The import occurs in the background and its
  /// progress can be monitored and managed via the Operation resource that is
  /// created. If an ImportDocuments operation is cancelled, it is possible
  /// that a subset of the data has already been imported to Cloud Firestore.
  func importDocuments(request: Google_Firestore_Admin_V1_ImportDocumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>

  /// Gets information about a database.
  func getDatabase(request: Google_Firestore_Admin_V1_GetDatabaseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_Admin_V1_Database>

  /// List all the databases in the project.
  func listDatabases(request: Google_Firestore_Admin_V1_ListDatabasesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Firestore_Admin_V1_ListDatabasesResponse>

  /// Updates a database.
  func updateDatabase(request: Google_Firestore_Admin_V1_UpdateDatabaseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Firestore_Admin_V1_FirestoreAdminProvider {
  public var serviceName: Substring {
    return Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_CreateIndexRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? [],
        userFunction: self.createIndex(request:context:)
      )

    case "ListIndexes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ListIndexesRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_ListIndexesResponse>(),
        interceptors: self.interceptors?.makeListIndexesInterceptors() ?? [],
        userFunction: self.listIndexes(request:context:)
      )

    case "GetIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_GetIndexRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_Index>(),
        interceptors: self.interceptors?.makeGetIndexInterceptors() ?? [],
        userFunction: self.getIndex(request:context:)
      )

    case "DeleteIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_DeleteIndexRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? [],
        userFunction: self.deleteIndex(request:context:)
      )

    case "GetField":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_GetFieldRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_Field>(),
        interceptors: self.interceptors?.makeGetFieldInterceptors() ?? [],
        userFunction: self.getField(request:context:)
      )

    case "UpdateField":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_UpdateFieldRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeUpdateFieldInterceptors() ?? [],
        userFunction: self.updateField(request:context:)
      )

    case "ListFields":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ListFieldsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_ListFieldsResponse>(),
        interceptors: self.interceptors?.makeListFieldsInterceptors() ?? [],
        userFunction: self.listFields(request:context:)
      )

    case "ExportDocuments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ExportDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeExportDocumentsInterceptors() ?? [],
        userFunction: self.exportDocuments(request:context:)
      )

    case "ImportDocuments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ImportDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeImportDocumentsInterceptors() ?? [],
        userFunction: self.importDocuments(request:context:)
      )

    case "GetDatabase":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_GetDatabaseRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_Database>(),
        interceptors: self.interceptors?.makeGetDatabaseInterceptors() ?? [],
        userFunction: self.getDatabase(request:context:)
      )

    case "ListDatabases":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ListDatabasesRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_ListDatabasesResponse>(),
        interceptors: self.interceptors?.makeListDatabasesInterceptors() ?? [],
        userFunction: self.listDatabases(request:context:)
      )

    case "UpdateDatabase":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_UpdateDatabaseRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeUpdateDatabaseInterceptors() ?? [],
        userFunction: self.updateDatabase(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// The Cloud Firestore Admin API.
///
/// This API provides several administrative services for Cloud Firestore.
///
/// Project, Database, Namespace, Collection, Collection Group, and Document are
/// used as defined in the Google Cloud Firestore API.
///
/// Operation: An Operation represents work being performed in the background.
///
/// The index service manages Cloud Firestore indexes.
///
/// Index creation is performed asynchronously.
/// An Operation resource is created for each such asynchronous operation.
/// The state of the operation (including any errors encountered)
/// may be queried via the Operation resource.
///
/// The Operations collection provides a record of actions performed for the
/// specified Project (including any Operations in progress). Operations are not
/// created directly but through calls on other collections or resources.
///
/// An Operation that is done may be deleted so that it is no longer listed as
/// part of the Operation collection. Operations are garbage collected after
/// 30 days. By default, ListOperations will only return in progress and failed
/// operations. To list completed operation, issue a ListOperations request with
/// the filter `done: true`.
///
/// Operations are created by service `FirestoreAdmin`, but are accessed via
/// service `google.longrunning.Operations`.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Firestore_Admin_V1_FirestoreAdminAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Firestore_Admin_V1_FirestoreAdminServerInterceptorFactoryProtocol? { get }

  /// Creates a composite index. This returns a [google.longrunning.Operation][google.longrunning.Operation]
  /// which may be used to track the status of the creation. The metadata for
  /// the operation will be the type [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
  @Sendable func createIndex(
    request: Google_Firestore_Admin_V1_CreateIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Longrunning_Operation

  /// Lists composite indexes.
  @Sendable func listIndexes(
    request: Google_Firestore_Admin_V1_ListIndexesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_Admin_V1_ListIndexesResponse

  /// Gets a composite index.
  @Sendable func getIndex(
    request: Google_Firestore_Admin_V1_GetIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_Admin_V1_Index

  /// Deletes a composite index.
  @Sendable func deleteIndex(
    request: Google_Firestore_Admin_V1_DeleteIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Gets the metadata and configuration for a Field.
  @Sendable func getField(
    request: Google_Firestore_Admin_V1_GetFieldRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_Admin_V1_Field

  /// Updates a field configuration. Currently, field updates apply only to
  /// single field index configuration. However, calls to
  /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField] should provide a field mask to avoid
  /// changing any configuration that the caller isn't aware of. The field mask
  /// should be specified as: `{ paths: "index_config" }`.
  ///
  /// This call returns a [google.longrunning.Operation][google.longrunning.Operation] which may be used to
  /// track the status of the field update. The metadata for
  /// the operation will be the type [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
  ///
  /// To configure the default field settings for the database, use
  /// the special `Field` with resource name:
  /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
  @Sendable func updateField(
    request: Google_Firestore_Admin_V1_UpdateFieldRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Longrunning_Operation

  /// Lists the field configuration and metadata for this database.
  ///
  /// Currently, [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] only supports listing fields
  /// that have been explicitly overridden. To issue this query, call
  /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] with the filter set to
  /// `indexConfig.usesAncestorConfig:false` .
  @Sendable func listFields(
    request: Google_Firestore_Admin_V1_ListFieldsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_Admin_V1_ListFieldsResponse

  /// Exports a copy of all or a subset of documents from Google Cloud Firestore
  /// to another storage system, such as Google Cloud Storage. Recent updates to
  /// documents may not be reflected in the export. The export occurs in the
  /// background and its progress can be monitored and managed via the
  /// Operation resource that is created. The output of an export may only be
  /// used once the associated operation is done. If an export operation is
  /// cancelled before completion it may leave partial data behind in Google
  /// Cloud Storage.
  ///
  /// For more details on export behavior and output format, refer to:
  /// https://cloud.google.com/firestore/docs/manage-data/export-import
  @Sendable func exportDocuments(
    request: Google_Firestore_Admin_V1_ExportDocumentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Longrunning_Operation

  /// Imports documents into Google Cloud Firestore. Existing documents with the
  /// same name are overwritten. The import occurs in the background and its
  /// progress can be monitored and managed via the Operation resource that is
  /// created. If an ImportDocuments operation is cancelled, it is possible
  /// that a subset of the data has already been imported to Cloud Firestore.
  @Sendable func importDocuments(
    request: Google_Firestore_Admin_V1_ImportDocumentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Longrunning_Operation

  /// Gets information about a database.
  @Sendable func getDatabase(
    request: Google_Firestore_Admin_V1_GetDatabaseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_Admin_V1_Database

  /// List all the databases in the project.
  @Sendable func listDatabases(
    request: Google_Firestore_Admin_V1_ListDatabasesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Firestore_Admin_V1_ListDatabasesResponse

  /// Updates a database.
  @Sendable func updateDatabase(
    request: Google_Firestore_Admin_V1_UpdateDatabaseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Google_Longrunning_Operation
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Firestore_Admin_V1_FirestoreAdminAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Google_Firestore_Admin_V1_FirestoreAdminServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_CreateIndexRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? [],
        wrapping: self.createIndex(request:context:)
      )

    case "ListIndexes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ListIndexesRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_ListIndexesResponse>(),
        interceptors: self.interceptors?.makeListIndexesInterceptors() ?? [],
        wrapping: self.listIndexes(request:context:)
      )

    case "GetIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_GetIndexRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_Index>(),
        interceptors: self.interceptors?.makeGetIndexInterceptors() ?? [],
        wrapping: self.getIndex(request:context:)
      )

    case "DeleteIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_DeleteIndexRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? [],
        wrapping: self.deleteIndex(request:context:)
      )

    case "GetField":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_GetFieldRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_Field>(),
        interceptors: self.interceptors?.makeGetFieldInterceptors() ?? [],
        wrapping: self.getField(request:context:)
      )

    case "UpdateField":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_UpdateFieldRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeUpdateFieldInterceptors() ?? [],
        wrapping: self.updateField(request:context:)
      )

    case "ListFields":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ListFieldsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_ListFieldsResponse>(),
        interceptors: self.interceptors?.makeListFieldsInterceptors() ?? [],
        wrapping: self.listFields(request:context:)
      )

    case "ExportDocuments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ExportDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeExportDocumentsInterceptors() ?? [],
        wrapping: self.exportDocuments(request:context:)
      )

    case "ImportDocuments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ImportDocumentsRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeImportDocumentsInterceptors() ?? [],
        wrapping: self.importDocuments(request:context:)
      )

    case "GetDatabase":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_GetDatabaseRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_Database>(),
        interceptors: self.interceptors?.makeGetDatabaseInterceptors() ?? [],
        wrapping: self.getDatabase(request:context:)
      )

    case "ListDatabases":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_ListDatabasesRequest>(),
        responseSerializer: ProtobufSerializer<Google_Firestore_Admin_V1_ListDatabasesResponse>(),
        interceptors: self.interceptors?.makeListDatabasesInterceptors() ?? [],
        wrapping: self.listDatabases(request:context:)
      )

    case "UpdateDatabase":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Firestore_Admin_V1_UpdateDatabaseRequest>(),
        responseSerializer: ProtobufSerializer<Google_Longrunning_Operation>(),
        interceptors: self.interceptors?.makeUpdateDatabaseInterceptors() ?? [],
        wrapping: self.updateDatabase(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Google_Firestore_Admin_V1_FirestoreAdminServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateIndexInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_CreateIndexRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when handling 'listIndexes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListIndexesInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_ListIndexesRequest, Google_Firestore_Admin_V1_ListIndexesResponse>]

  /// - Returns: Interceptors to use when handling 'getIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetIndexInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_GetIndexRequest, Google_Firestore_Admin_V1_Index>]

  /// - Returns: Interceptors to use when handling 'deleteIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteIndexInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_DeleteIndexRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getField'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFieldInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_GetFieldRequest, Google_Firestore_Admin_V1_Field>]

  /// - Returns: Interceptors to use when handling 'updateField'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateFieldInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_UpdateFieldRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when handling 'listFields'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListFieldsInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_ListFieldsRequest, Google_Firestore_Admin_V1_ListFieldsResponse>]

  /// - Returns: Interceptors to use when handling 'exportDocuments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExportDocumentsInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_ExportDocumentsRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when handling 'importDocuments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportDocumentsInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_ImportDocumentsRequest, Google_Longrunning_Operation>]

  /// - Returns: Interceptors to use when handling 'getDatabase'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDatabaseInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_GetDatabaseRequest, Google_Firestore_Admin_V1_Database>]

  /// - Returns: Interceptors to use when handling 'listDatabases'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListDatabasesInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_ListDatabasesRequest, Google_Firestore_Admin_V1_ListDatabasesResponse>]

  /// - Returns: Interceptors to use when handling 'updateDatabase'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDatabaseInterceptors() -> [ServerInterceptor<Google_Firestore_Admin_V1_UpdateDatabaseRequest, Google_Longrunning_Operation>]
}

public enum Google_Firestore_Admin_V1_FirestoreAdminServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FirestoreAdmin",
    fullName: "google.firestore.admin.v1.FirestoreAdmin",
    methods: [
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.createIndex,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.listIndexes,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.getIndex,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.deleteIndex,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.getField,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.updateField,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.listFields,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.exportDocuments,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.importDocuments,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.getDatabase,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.listDatabases,
      Google_Firestore_Admin_V1_FirestoreAdminServerMetadata.Methods.updateDatabase,
    ]
  )

  public enum Methods {
    public static let createIndex = GRPCMethodDescriptor(
      name: "CreateIndex",
      path: "/google.firestore.admin.v1.FirestoreAdmin/CreateIndex",
      type: GRPCCallType.unary
    )

    public static let listIndexes = GRPCMethodDescriptor(
      name: "ListIndexes",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ListIndexes",
      type: GRPCCallType.unary
    )

    public static let getIndex = GRPCMethodDescriptor(
      name: "GetIndex",
      path: "/google.firestore.admin.v1.FirestoreAdmin/GetIndex",
      type: GRPCCallType.unary
    )

    public static let deleteIndex = GRPCMethodDescriptor(
      name: "DeleteIndex",
      path: "/google.firestore.admin.v1.FirestoreAdmin/DeleteIndex",
      type: GRPCCallType.unary
    )

    public static let getField = GRPCMethodDescriptor(
      name: "GetField",
      path: "/google.firestore.admin.v1.FirestoreAdmin/GetField",
      type: GRPCCallType.unary
    )

    public static let updateField = GRPCMethodDescriptor(
      name: "UpdateField",
      path: "/google.firestore.admin.v1.FirestoreAdmin/UpdateField",
      type: GRPCCallType.unary
    )

    public static let listFields = GRPCMethodDescriptor(
      name: "ListFields",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ListFields",
      type: GRPCCallType.unary
    )

    public static let exportDocuments = GRPCMethodDescriptor(
      name: "ExportDocuments",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ExportDocuments",
      type: GRPCCallType.unary
    )

    public static let importDocuments = GRPCMethodDescriptor(
      name: "ImportDocuments",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ImportDocuments",
      type: GRPCCallType.unary
    )

    public static let getDatabase = GRPCMethodDescriptor(
      name: "GetDatabase",
      path: "/google.firestore.admin.v1.FirestoreAdmin/GetDatabase",
      type: GRPCCallType.unary
    )

    public static let listDatabases = GRPCMethodDescriptor(
      name: "ListDatabases",
      path: "/google.firestore.admin.v1.FirestoreAdmin/ListDatabases",
      type: GRPCCallType.unary
    )

    public static let updateDatabase = GRPCMethodDescriptor(
      name: "UpdateDatabase",
      path: "/google.firestore.admin.v1.FirestoreAdmin/UpdateDatabase",
      type: GRPCCallType.unary
    )
  }
}
