// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/firestore/admin/v1/field.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a single field in the database.
///
/// Fields are grouped by their "Collection Group", which represent all
/// collections in the database with the same id.
public struct Google_Firestore_Admin_V1_Field {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. A field name of the form
  /// `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
  ///
  /// A field path may be a simple field name, e.g. `address` or a path to fields
  /// within map_value , e.g. `address.city`,
  /// or a special field path. The only valid special field is `*`, which
  /// represents any field.
  ///
  /// Field paths may be quoted using ` (backtick). The only character that needs
  /// to be escaped within a quoted field path is the backtick character itself,
  /// escaped using a backslash. Special characters in field paths that
  /// must be quoted include: `*`, `.`,
  /// ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.
  ///
  /// Examples:
  /// (Note: Comments here are written in markdown syntax, so there is an
  ///  additional layer of backticks to represent a code block)
  /// `\`address.city\`` represents a field named `address.city`, not the map key
  /// `city` in the field `address`.
  /// `\`*\`` represents a field named `*`, not any field.
  ///
  /// A special `Field` contains the default indexing settings for all fields.
  /// This field's resource name is:
  /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`
  /// Indexes defined on this `Field` will be applied to all fields which do not
  /// have their own `Field` index configuration.
  public var name: String = String()

  /// The index configuration for this field. If unset, field indexing will
  /// revert to the configuration defined by the `ancestor_field`. To
  /// explicitly remove all indexes for this field, specify an index config
  /// with an empty list of indexes.
  public var indexConfig: Google_Firestore_Admin_V1_Field.IndexConfig {
    get {return _indexConfig ?? Google_Firestore_Admin_V1_Field.IndexConfig()}
    set {_indexConfig = newValue}
  }
  /// Returns true if `indexConfig` has been explicitly set.
  public var hasIndexConfig: Bool {return self._indexConfig != nil}
  /// Clears the value of `indexConfig`. Subsequent reads from it will return its default value.
  public mutating func clearIndexConfig() {self._indexConfig = nil}

  /// The TTL configuration for this `Field`.
  /// Setting or unsetting this will enable or disable the TTL for
  /// documents that have this `Field`.
  public var ttlConfig: Google_Firestore_Admin_V1_Field.TtlConfig {
    get {return _ttlConfig ?? Google_Firestore_Admin_V1_Field.TtlConfig()}
    set {_ttlConfig = newValue}
  }
  /// Returns true if `ttlConfig` has been explicitly set.
  public var hasTtlConfig: Bool {return self._ttlConfig != nil}
  /// Clears the value of `ttlConfig`. Subsequent reads from it will return its default value.
  public mutating func clearTtlConfig() {self._ttlConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The index configuration for this field.
  public struct IndexConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The indexes supported for this field.
    public var indexes: [Google_Firestore_Admin_V1_Index] = []

    /// Output only. When true, the `Field`'s index configuration is set from the
    /// configuration specified by the `ancestor_field`.
    /// When false, the `Field`'s index configuration is defined explicitly.
    public var usesAncestorConfig: Bool = false

    /// Output only. Specifies the resource name of the `Field` from which this field's
    /// index configuration is set (when `uses_ancestor_config` is true),
    /// or from which it *would* be set if this field had no index configuration
    /// (when `uses_ancestor_config` is false).
    public var ancestorField: String = String()

    /// Output only
    /// When true, the `Field`'s index configuration is in the process of being
    /// reverted. Once complete, the index config will transition to the same
    /// state as the field specified by `ancestor_field`, at which point
    /// `uses_ancestor_config` will be `true` and `reverting` will be `false`.
    public var reverting: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// The TTL (time-to-live) configuration for documents that have this `Field`
  /// set.
  /// Storing a timestamp value into a TTL-enabled field will be treated as
  /// the document's absolute expiration time. Using any other data type or
  /// leaving the field absent will disable the TTL for the individual document.
  public struct TtlConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The state of the TTL configuration.
    public var state: Google_Firestore_Admin_V1_Field.TtlConfig.State = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The state of applying the TTL configuration to all documents.
    public enum State: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// The state is unspecified or unknown.
      case unspecified // = 0

      /// The TTL is being applied. There is an active long-running operation to
      /// track the change. Newly written documents will have TTLs applied as
      /// requested. Requested TTLs on existing documents are still being
      /// processed. When TTLs on all existing documents have been processed, the
      /// state will move to 'ACTIVE'.
      case creating // = 1

      /// The TTL is active for all documents.
      case active // = 2

      /// The TTL configuration could not be enabled for all existing documents.
      /// Newly written documents will continue to have their TTL applied.
      /// The LRO returned when last attempting to enable TTL for this `Field`
      /// has failed, and may have more details.
      case needsRepair // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .creating
        case 2: self = .active
        case 3: self = .needsRepair
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .creating: return 1
        case .active: return 2
        case .needsRepair: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _indexConfig: Google_Firestore_Admin_V1_Field.IndexConfig? = nil
  fileprivate var _ttlConfig: Google_Firestore_Admin_V1_Field.TtlConfig? = nil
}

#if swift(>=4.2)

extension Google_Firestore_Admin_V1_Field.TtlConfig.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Firestore_Admin_V1_Field.TtlConfig.State] = [
    .unspecified,
    .creating,
    .active,
    .needsRepair,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Google_Firestore_Admin_V1_Field: @unchecked Sendable {}
extension Google_Firestore_Admin_V1_Field.IndexConfig: @unchecked Sendable {}
extension Google_Firestore_Admin_V1_Field.TtlConfig: @unchecked Sendable {}
extension Google_Firestore_Admin_V1_Field.TtlConfig.State: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.firestore.admin.v1"

extension Google_Firestore_Admin_V1_Field: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Field"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "index_config"),
    3: .standard(proto: "ttl_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._indexConfig) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ttlConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._indexConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._ttlConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_Admin_V1_Field, rhs: Google_Firestore_Admin_V1_Field) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._indexConfig != rhs._indexConfig {return false}
    if lhs._ttlConfig != rhs._ttlConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_Admin_V1_Field.IndexConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Firestore_Admin_V1_Field.protoMessageName + ".IndexConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "indexes"),
    2: .standard(proto: "uses_ancestor_config"),
    3: .standard(proto: "ancestor_field"),
    4: .same(proto: "reverting"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.indexes) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.usesAncestorConfig) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ancestorField) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.reverting) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.indexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.indexes, fieldNumber: 1)
    }
    if self.usesAncestorConfig != false {
      try visitor.visitSingularBoolField(value: self.usesAncestorConfig, fieldNumber: 2)
    }
    if !self.ancestorField.isEmpty {
      try visitor.visitSingularStringField(value: self.ancestorField, fieldNumber: 3)
    }
    if self.reverting != false {
      try visitor.visitSingularBoolField(value: self.reverting, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_Admin_V1_Field.IndexConfig, rhs: Google_Firestore_Admin_V1_Field.IndexConfig) -> Bool {
    if lhs.indexes != rhs.indexes {return false}
    if lhs.usesAncestorConfig != rhs.usesAncestorConfig {return false}
    if lhs.ancestorField != rhs.ancestorField {return false}
    if lhs.reverting != rhs.reverting {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_Admin_V1_Field.TtlConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Firestore_Admin_V1_Field.protoMessageName + ".TtlConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_Admin_V1_Field.TtlConfig, rhs: Google_Firestore_Admin_V1_Field.TtlConfig) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_Admin_V1_Field.TtlConfig.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "CREATING"),
    2: .same(proto: "ACTIVE"),
    3: .same(proto: "NEEDS_REPAIR"),
  ]
}
