// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/resource.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A simple descriptor of a resource type.
///
/// ResourceDescriptor annotates a resource message (either by means of a
/// protobuf annotation or use in the service config), and associates the
/// resource's schema, the resource type, and the pattern of the resource name.
///
/// Example:
///
///     message Topic {
///       // Indicates this message defines a resource schema.
///       // Declares the resource type in the format of {service}/{kind}.
///       // For Kubernetes resources, the format is {api group}/{kind}.
///       option (google.api.resource) = {
///         type: "pubsub.googleapis.com/Topic"
///         pattern: "projects/{project}/topics/{topic}"
///       };
///     }
///
/// The ResourceDescriptor Yaml config will look like:
///
///     resources:
///     - type: "pubsub.googleapis.com/Topic"
///       pattern: "projects/{project}/topics/{topic}"
///
/// Sometimes, resources have multiple patterns, typically because they can
/// live under multiple parents.
///
/// Example:
///
///     message LogEntry {
///       option (google.api.resource) = {
///         type: "logging.googleapis.com/LogEntry"
///         pattern: "projects/{project}/logs/{log}"
///         pattern: "folders/{folder}/logs/{log}"
///         pattern: "organizations/{organization}/logs/{log}"
///         pattern: "billingAccounts/{billing_account}/logs/{log}"
///       };
///     }
///
/// The ResourceDescriptor Yaml config will look like:
///
///     resources:
///     - type: 'logging.googleapis.com/LogEntry'
///       pattern: "projects/{project}/logs/{log}"
///       pattern: "folders/{folder}/logs/{log}"
///       pattern: "organizations/{organization}/logs/{log}"
///       pattern: "billingAccounts/{billing_account}/logs/{log}"
public struct Google_Api_ResourceDescriptor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource type. It must be in the format of
  /// {service_name}/{resource_type_kind}. The `resource_type_kind` must be
  /// singular and must not include version numbers.
  ///
  /// Example: `storage.googleapis.com/Bucket`
  ///
  /// The value of the resource_type_kind must follow the regular expression
  /// /[A-Za-z][a-zA-Z0-9]+/. It should start with an upper case character and
  /// should use PascalCase (UpperCamelCase). The maximum number of
  /// characters allowed for the `resource_type_kind` is 100.
  public var type: String = String()

  /// Optional. The relative resource name pattern associated with this resource
  /// type. The DNS prefix of the full resource name shouldn't be specified here.
  ///
  /// The path pattern must follow the syntax, which aligns with HTTP binding
  /// syntax:
  ///
  ///     Template = Segment { "/" Segment } ;
  ///     Segment = LITERAL | Variable ;
  ///     Variable = "{" LITERAL "}" ;
  ///
  /// Examples:
  ///
  ///     - "projects/{project}/topics/{topic}"
  ///     - "projects/{project}/knowledgeBases/{knowledge_base}"
  ///
  /// The components in braces correspond to the IDs for each resource in the
  /// hierarchy. It is expected that, if multiple patterns are provided,
  /// the same component name (e.g. "project") refers to IDs of the same
  /// type of resource.
  public var pattern: [String] = []

  /// Optional. The field on the resource that designates the resource name
  /// field. If omitted, this is assumed to be "name".
  public var nameField: String = String()

  /// Optional. The historical or future-looking state of the resource pattern.
  ///
  /// Example:
  ///
  ///     // The InspectTemplate message originally only supported resource
  ///     // names with organization, and project was added later.
  ///     message InspectTemplate {
  ///       option (google.api.resource) = {
  ///         type: "dlp.googleapis.com/InspectTemplate"
  ///         pattern:
  ///         "organizations/{organization}/inspectTemplates/{inspect_template}"
  ///         pattern: "projects/{project}/inspectTemplates/{inspect_template}"
  ///         history: ORIGINALLY_SINGLE_PATTERN
  ///       };
  ///     }
  public var history: Google_Api_ResourceDescriptor.History = .unspecified

  /// The plural name used in the resource name and permission names, such as
  /// 'projects' for the resource name of 'projects/{project}' and the permission
  /// name of 'cloudresourcemanager.googleapis.com/projects.get'. It is the same
  /// concept of the `plural` field in k8s CRD spec
  /// https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
  ///
  /// Note: The plural form is required even for singleton resources. See
  /// https://aip.dev/156
  public var plural: String = String()

  /// The same concept of the `singular` field in k8s CRD spec
  /// https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
  /// Such as "project" for the `resourcemanager.googleapis.com/Project` type.
  public var singular: String = String()

  /// Style flag(s) for this resource.
  /// These indicate that a resource is expected to conform to a given
  /// style. See the specific style flags for additional information.
  public var style: [Google_Api_ResourceDescriptor.Style] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A description of the historical or future-looking state of the
  /// resource pattern.
  public enum History: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The "unset" value.
    case unspecified // = 0

    /// The resource originally had one pattern and launched as such, and
    /// additional patterns were added later.
    case originallySinglePattern // = 1

    /// The resource has one pattern, but the API owner expects to add more
    /// later. (This is the inverse of ORIGINALLY_SINGLE_PATTERN, and prevents
    /// that from being necessary once there are multiple patterns.)
    case futureMultiPattern // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .originallySinglePattern
      case 2: self = .futureMultiPattern
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .originallySinglePattern: return 1
      case .futureMultiPattern: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A flag representing a specific style that a resource claims to conform to.
  public enum Style: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The unspecified value. Do not use.
    case unspecified // = 0

    /// This resource is intended to be "declarative-friendly".
    ///
    /// Declarative-friendly resources must be more strictly consistent, and
    /// setting this to true communicates to tools that this resource should
    /// adhere to declarative-friendly expectations.
    ///
    /// Note: This is used by the API linter (linter.aip.dev) to enable
    /// additional checks.
    case declarativeFriendly // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .declarativeFriendly
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .declarativeFriendly: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Api_ResourceDescriptor.History: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_ResourceDescriptor.History] = [
    .unspecified,
    .originallySinglePattern,
    .futureMultiPattern,
  ]
}

extension Google_Api_ResourceDescriptor.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_ResourceDescriptor.Style] = [
    .unspecified,
    .declarativeFriendly,
  ]
}

#endif  // swift(>=4.2)

/// Defines a proto annotation that describes a string field that refers to
/// an API resource.
public struct Google_Api_ResourceReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource type that the annotated field references.
  ///
  /// Example:
  ///
  ///     message Subscription {
  ///       string topic = 2 [(google.api.resource_reference) = {
  ///         type: "pubsub.googleapis.com/Topic"
  ///       }];
  ///     }
  ///
  /// Occasionally, a field may reference an arbitrary resource. In this case,
  /// APIs use the special value * in their resource reference.
  ///
  /// Example:
  ///
  ///     message GetIamPolicyRequest {
  ///       string resource = 2 [(google.api.resource_reference) = {
  ///         type: "*"
  ///       }];
  ///     }
  public var type: String = String()

  /// The resource type of a child collection that the annotated field
  /// references. This is useful for annotating the `parent` field that
  /// doesn't have a fixed resource type.
  ///
  /// Example:
  ///
  ///     message ListLogEntriesRequest {
  ///       string parent = 1 [(google.api.resource_reference) = {
  ///         child_type: "logging.googleapis.com/LogEntry"
  ///       };
  ///     }
  public var childType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Google_Api_ResourceDescriptor: @unchecked Sendable {}
extension Google_Api_ResourceDescriptor.History: @unchecked Sendable {}
extension Google_Api_ResourceDescriptor.Style: @unchecked Sendable {}
extension Google_Api_ResourceReference: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in resource.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  /// An annotation that describes a resource reference, see
  /// [ResourceReference][].
  public var Google_Api_resourceReference: Google_Api_ResourceReference {
    get {return getExtensionValue(ext: Google_Api_Extensions_resource_reference) ?? Google_Api_ResourceReference()}
    set {setExtensionValue(ext: Google_Api_Extensions_resource_reference, value: newValue)}
  }
  /// Returns true if extension `Google_Api_Extensions_resource_reference`
  /// has been explicitly set.
  public var hasGoogle_Api_resourceReference: Bool {
    return hasExtensionValue(ext: Google_Api_Extensions_resource_reference)
  }
  /// Clears the value of extension `Google_Api_Extensions_resource_reference`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGoogle_Api_resourceReference() {
    clearExtensionValue(ext: Google_Api_Extensions_resource_reference)
  }
}

extension SwiftProtobuf.Google_Protobuf_FileOptions {

  /// An annotation that describes a resource definition without a corresponding
  /// message; see [ResourceDescriptor][].
  public var Google_Api_resourceDefinition: [Google_Api_ResourceDescriptor] {
    get {return getExtensionValue(ext: Google_Api_Extensions_resource_definition) ?? []}
    set {setExtensionValue(ext: Google_Api_Extensions_resource_definition, value: newValue)}
  }
  /// Returns true if extension `Google_Api_Extensions_resource_definition`
  /// has been explicitly set.
  public var hasGoogle_Api_resourceDefinition: Bool {
    return hasExtensionValue(ext: Google_Api_Extensions_resource_definition)
  }
  /// Clears the value of extension `Google_Api_Extensions_resource_definition`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGoogle_Api_resourceDefinition() {
    clearExtensionValue(ext: Google_Api_Extensions_resource_definition)
  }
}

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  /// An annotation that describes a resource definition, see
  /// [ResourceDescriptor][].
  public var Google_Api_resource: Google_Api_ResourceDescriptor {
    get {return getExtensionValue(ext: Google_Api_Extensions_resource) ?? Google_Api_ResourceDescriptor()}
    set {setExtensionValue(ext: Google_Api_Extensions_resource, value: newValue)}
  }
  /// Returns true if extension `Google_Api_Extensions_resource`
  /// has been explicitly set.
  public var hasGoogle_Api_resource: Bool {
    return hasExtensionValue(ext: Google_Api_Extensions_resource)
  }
  /// Clears the value of extension `Google_Api_Extensions_resource`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGoogle_Api_resource() {
    clearExtensionValue(ext: Google_Api_Extensions_resource)
  }

}

// MARK: - File's ExtensionMap: Google_Api_Resource_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Google_Api_Resource_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Google_Api_Extensions_resource_reference,
  Google_Api_Extensions_resource_definition,
  Google_Api_Extensions_resource
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// An annotation that describes a resource reference, see
/// [ResourceReference][].
public let Google_Api_Extensions_resource_reference = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Api_ResourceReference>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 1055,
  fieldName: "google.api.resource_reference"
)

/// An annotation that describes a resource definition without a corresponding
/// message; see [ResourceDescriptor][].
public let Google_Api_Extensions_resource_definition = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<Google_Api_ResourceDescriptor>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 1053,
  fieldName: "google.api.resource_definition"
)

/// An annotation that describes a resource definition, see
/// [ResourceDescriptor][].
public let Google_Api_Extensions_resource = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Api_ResourceDescriptor>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 1053,
  fieldName: "google.api.resource"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api"

extension Google_Api_ResourceDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceDescriptor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "pattern"),
    3: .standard(proto: "name_field"),
    4: .same(proto: "history"),
    5: .same(proto: "plural"),
    6: .same(proto: "singular"),
    10: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.pattern) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nameField) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.history) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.plural) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.singular) }()
      case 10: try { try decoder.decodeRepeatedEnumField(value: &self.style) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.pattern.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pattern, fieldNumber: 2)
    }
    if !self.nameField.isEmpty {
      try visitor.visitSingularStringField(value: self.nameField, fieldNumber: 3)
    }
    if self.history != .unspecified {
      try visitor.visitSingularEnumField(value: self.history, fieldNumber: 4)
    }
    if !self.plural.isEmpty {
      try visitor.visitSingularStringField(value: self.plural, fieldNumber: 5)
    }
    if !self.singular.isEmpty {
      try visitor.visitSingularStringField(value: self.singular, fieldNumber: 6)
    }
    if !self.style.isEmpty {
      try visitor.visitPackedEnumField(value: self.style, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_ResourceDescriptor, rhs: Google_Api_ResourceDescriptor) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.pattern != rhs.pattern {return false}
    if lhs.nameField != rhs.nameField {return false}
    if lhs.history != rhs.history {return false}
    if lhs.plural != rhs.plural {return false}
    if lhs.singular != rhs.singular {return false}
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_ResourceDescriptor.History: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HISTORY_UNSPECIFIED"),
    1: .same(proto: "ORIGINALLY_SINGLE_PATTERN"),
    2: .same(proto: "FUTURE_MULTI_PATTERN"),
  ]
}

extension Google_Api_ResourceDescriptor.Style: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STYLE_UNSPECIFIED"),
    1: .same(proto: "DECLARATIVE_FRIENDLY"),
  ]
}

extension Google_Api_ResourceReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "child_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.childType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.childType.isEmpty {
      try visitor.visitSingularStringField(value: self.childType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_ResourceReference, rhs: Google_Api_ResourceReference) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.childType != rhs.childType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
